# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

types map_list_panel_types {
	type map_list_panel_item = button {
		using = clean_button
		size = { @panel_width 40 }
		tooltip = "[MapListOption.GetTooltip]"
		using = tooltip_es
		block "interaction" {
			enabled = "[MapListOption.CanClick]"
			onclick = "[MapListOption.OnClick]"
			onrightclick = "[MapListOption.OnRightClick]"
			onmousehierarchyenter = "[MapListOption.OnMouseEnter]"
			onmousehierarchyleave = "[MapListOption.OnMouseLeave]"
		}

		icon = {
			using = highlighted_square_selection
			visible = "[MapListOption.IsMapTargetHighlighted]"
		}

		block "button_color" {

		}

		block "itemvisibility" {

		}

		state = {
			name = _mouse_enter
			on_start = "[PdxGuiWidget.FindChild('map_list_status').TriggerAnimation('map_list_status_mouse_enter')]"
			on_start = "[PdxGuiWidget.FindChild('map_list_status_bg').TriggerAnimation('map_list_status_mouse_enter')]"
		}
		state = {
			name = _mouse_leave
			on_start = "[PdxGuiWidget.FindChild('map_list_status').TriggerAnimation('map_list_status_mouse_leave')]"
			on_start = "[PdxGuiWidget.FindChild('map_list_status_bg').TriggerAnimation('map_list_status_mouse_leave')]"
		}
		state = {
			name = _mouse_press
			on_start = "[PdxGuiWidget.FindChild('map_list_status').TriggerAnimation('map_list_status_mouse_press')]"
			on_start = "[PdxGuiWidget.FindChild('map_list_status_bg').TriggerAnimation('map_list_status_mouse_press')]"
		}
		state = {
			name = _mouse_release
			on_start = "[PdxGuiWidget.FindChild('map_list_status').TriggerAnimation('map_list_status_mouse_release')]"
			on_start = "[PdxGuiWidget.FindChild('map_list_status_bg').TriggerAnimation('map_list_status_mouse_release')]"
		}

		icon = {
			name = "map_list_status_bg"
			texture = "gfx/interface/map_list/map_list_status_bg.dds"
			framesize = { 600 80 }
			size = { 300 40 }
			position = { -5 0 }
			alpha = 0.4
			frame = "[MapListOption.GetBackgroundStatusFrame]"

			alwaystransparent = yes

			state = {
				name = map_list_status_mouse_enter
				alpha = 0.8
				duration = 0.08
			}
			state = {
				name = map_list_status_mouse_press
				alpha = 0.8
				duration = 0.08
			}
			state = {
				name = map_list_status_mouse_release
				alpha = 0.8
				duration = 0.08
			}
			state = {
				name = map_list_status_mouse_leave
				alpha = 0.4
				duration = 0.12
			}
		}

		flowcontainer = {
			parentanchor = vcenter

			widget = {
				size = { 55 40 }
				visible = "[MapListOption.ShouldShowStatusIcon]"
				icon = {
					name = "map_list_status"
					texture = "gfx/interface/map_list/map_list_status_icons.dds"
					framesize = { 130 72 }
					size = { 65 36 }
					scale = 0.8
					alpha = 0.5
					parentanchor = center
					frame = "[MapListOption.GetIconStatusFrame]"

					alwaystransparent = yes

					state = {
						name = map_list_status_mouse_enter
						scale = 1
						alpha = 1
						duration = 0.08
					}
					state = {
						name = map_list_status_mouse_press
						scale = 1
						alpha = 1
						duration = 0.08
					}
					state = {
						name = map_list_status_mouse_release
						scale = 1
						alpha = 1
						duration = 0.08
					}
					state = {
						name = map_list_status_mouse_leave
						scale = 0.8
						alpha = 0.8
						duration = 0.12
					}
				}
			}

			block "values" {
				textbox = {
					margin = { 5 0 }
					size = { 475 25 }
					align = left|nobaseline
					text = "[MapListOption.GetTitle]"
					parentanchor = vcenter
					elide = right
				}
			}
		}
	}

	type map_list_panel_item_interaction = widget {
		size = { @panel_width 40 }

		block "itemvisibility" {}

		block "background" {
			icon = {
				name = "map_list_status_bg"
				texture = "gfx/interface/map_list/map_list_status_bg.dds"
				framesize = { 600 80 }
				size = { 600 40 }
				alpha = 0.8
				position = { -5 0 }
				frame = "[MapListOption.GetBackgroundStatusFrame]"
				parentanchor = vcenter

				alwaystransparent = yes
			}
		}

		state = {
			name = _mouse_enter
			on_start = "[PdxGuiWidget.FindChild('map_list_status_bg').TriggerAnimation('map_list_status_mouse_enter')]"
		}

		state = {
			name = _mouse_release
			on_start = "[PdxGuiWidget.FindChild('map_list_status_bg').TriggerAnimation('map_list_status_mouse_release')]"
		}


		flowcontainer = {
			icon = {
				using = highlighted_square_selection
				visible = "[MapListOption.IsMapTargetHighlighted]"
			}

			button = {
				block "name_button_visibility" {
					visible = no
				}

				block "name_button_size" {
					size = { 140 40 }
				}

				using = default_button
				parentanchor = vcenter

				block "name_button_properties" {}

			}

			block "values" {
				textbox = {
					margin = { 5 5 }
					size = { 485 25 }
					align = left|nobaseline
					text = "[MapListOption.GetTitle]"
					parentanchor = vcenter
					elide = right
				}
			}

			button = {
				block "interaction_button_visibility" {}
				size = { 55 40 }
				using = default_button_action
				tooltip = "[MapListOption.GetTooltip]"
				using = tooltip_es
				parentanchor = vcenter

				block "interaction" {
					enabled = "[MapListOption.CanClick]"
					onclick = "[MapListOption.OnClick]"
					onrightclick = "[MapListOption.OnRightClick]"
					onmousehierarchyenter = "[MapListOption.OnMouseEnter]"
					onmousehierarchyleave = "[MapListOption.OnMouseLeave]"
				}

				block "option_highlight" {}

				state = {
					name = _mouse_enter
					on_start = "[PdxGuiWidget.FindChild('map_list_status').TriggerAnimation('map_list_status_mouse_enter')]"
				}
				state = {
					name = _mouse_leave
					on_start = "[PdxGuiWidget.FindChild('map_list_status').TriggerAnimation('map_list_status_mouse_leave')]"
				}
				state = {
					name = _mouse_press
					on_start = "[PdxGuiWidget.FindChild('map_list_status').TriggerAnimation('map_list_status_mouse_press')]"
				}
				state = {
					name = _mouse_release
					on_start = "[PdxGuiWidget.FindChild('map_list_status').TriggerAnimation('map_list_status_mouse_release')]"
				}

				block "button_color" {}

				widget = {
					parentanchor = center
					size = { 35 35 }
					visible = "[MapListOption.ShouldShowStatusIcon]"
					icon = {
						name = "map_list_status"
						texture = "gfx/interface/map_list/map_list_status_icons.dds"
						framesize = { 130 72 }
						size = { 65 36 }
						scale = 0.7
						alpha = 0.8
						parentanchor = center
						frame = "[MapListOption.GetIconStatusFrame]"

						alwaystransparent = yes

						state = {
							name = map_list_status_mouse_enter
							scale = 0.9
							alpha = 1
							duration = 0.08
						}
						state = {
							name = map_list_status_mouse_press
							scale = 0.7
							alpha = 0.8
							duration = 0.08
						}
						state = {
							name = map_list_status_mouse_release
							scale = 0.9
							alpha = 1
							duration = 0.08
						}
						state = {
							name = map_list_status_mouse_leave
							scale = 0.7
							alpha = 0.8
							duration = 0.12
						}
					}
				}
			}
		}
	}

	### MAP LIST WINDOW
	type map_list_panel = widget {
		using = sidepanel_plus_sidebar_size
		layoutpolicy_vertical = expanding
		alwaystransparent = no
		using = clickthrough_blocker
		layer = layer_ingame_menu

		state = {
			name = _show
			start_sound = {
				soundeffect = "event:/SFX/UI/SideBar/country"
			}
		}
		state = {
			name = _hide

		}

		using = sidepanel_filler_bg

		vbox = {
			using = sidebar_margin
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding

			background = {
				using = default_background
				margin = { 3 0 }
				margin_top = -9
				margin_bottom = 30
				margin_left = -50
			}

			widget = { size = { 10 20 }}

			widget = {
				name = "header"
				size = { 0 50 }
				layoutpolicy_horizontal = expanding

				background = {
					using = default_header_bg
					margin = { 0 2 }
				}

				textbox = {
					size = { @panel_width 50 }
					margin = { 40 0 }
					using = header_font
					using = fontsize_xl
					fontsize_min = 17
					elide = right
					text = "MAP_LIST_PANEL_TITLE"
					parentanchor = center
					align = center|nobaseline
					default_format = "#header"
				}

				back_button_large = {
					position = { 2 0 }
					parentanchor = left|vcenter
					block "header_back_button" {
						onclick = "[MapListPanelManager.CloseCurrentPanel]"
						onclick = "[MapListPanelManager.ResetActiveMapInteraction]"
						input_action = "back"
					}
				}

				close_button_large = {
					position = { -2 0 }
					parentanchor = right|vcenter
					block "header_close_button" {
						onclick = "[MapListPanelManager.CloseCurrentPanel]"
						onclick = "[MapListPanelManager.ResetActiveMapInteraction]"
					}
					shortcut = "close_window"
				}
			}

			flowcontainer = {
				margin = { 10 12 }
				visible = "[Not(StringIsEmpty(MapListPanel.GetTitle))]"

				flowcontainer = {
					direction = vertical

					textbox = {
						text = "[MapListPanel.GetTitle]"
						parentanchor = hcenter
						maximumsize = { 540 -1 }
						align = center|nobaseline
						using = fontsize_xl
						multiline = yes
						autoresize = yes
					}

					textbox = {
						parentanchor = hcenter
						maximumsize = { 540 -1 }

						text = "MAP_INTERACTION_ESC_TO_CANCEL"
						align = hcenter|nobaseline
						using = fontsize_medium
						multiline = yes
						autoresize = yes
					}
				}
			}

			flowcontainer = {
				margin_top = 5
	
				### DROPDOWN
				dropDown = {
					visible = "[StringIsEmpty(MapListPanel.GetTitle)]"
					datamodel = "[GetMapModeIndices]"
					onselectionchanged = "[SetLockedMapMode]"
					selectedindex = "[GetSelectedMapMode]"
					size = { @panel_width 35 }
					focuspolicy = all
					alwaystransparent = no

					active_item = {
						button = {
							using = expand_button_bg_right_fade
							size = { 100% 100% }
							button_trigger = none

							hbox = {
								margin_left = 10

								button = {
									size = { 15 15 }
									using = expand_arrow_expanded
									mirror = vertical
									alwaystransparent = yes
								}

								textbox = {
									margin_left = 5
									layoutpolicy_horizontal = expanding
									size = { 0 25 }
									fontsize_min = 12
									elide = right
									text = "[GetSelectedMapModeName]"
									align = left|nobaseline
								}
							}
						}
					}

					item = {
						widget = {
							button = {
								size = { 95% 100% }
								using = clean_button
								parentanchor = hcenter

								button_trigger = none

								textbox = {
									autoresize = yes
									text = "[GetMapModeName( int32.GetInt )]"
									align = left|nobaseline
									parentanchor = left|vcenter
									margin_left = 10
								}
							}
						}
					}

					list = {
						scrollarea = {
							widgetanchor = top|left
							parentanchor = top|left
							position = { 0 35 }
							maximumsize = { -1 800 }
							autoresizescrollarea = yes
							alwaystransparent = yes
							scrollbarpolicy_horizontal = always_off

							background = {
								using = default_background
								margin = { 6 8 }
							}

							scrollwidget = {
								fixedgridbox = {
									alwaystransparent = no
									setitemsizefromcell = yes
									addcolumn = 350
									addrow = 30
								}
							}

							scrollbar_vertical = {
								using = vertical_scrollbar
							}

							scrollbar_horizontal = {
								using = horizontal_scrollbar
							}
						}
					}
				}
			}

			### sort buttons
			flowcontainer = {
				direction = horizontal
				margin = { 0 5 }

				block "headers" {
					sort_button = {
						align = center|nobaseline
						text = "DEFAULT_MAP_LIST_PANEL_TITLE_HEADER"
						tooltip = "DEFAULT_MAP_LIST_PANEL_TITLE_HEADER_TOOLTIP"
						size = { 485 20 }
						onclick = "[MapListPanel.Sort('title')]"
					}

					sort_button = {
						align = center|nobaseline
						tooltip = "DEFAULT_MAP_LIST_PANEL_STATUS_HEADER_TOOLTIP"
						size = { 55 20 }
						onclick = "[MapListPanel.Sort('status')]"
						button = {
							texture = "gfx/interface/buttons/sort_button_icons/sort_icon_status.dds"
							size = { 25 25 }
							parentanchor = center
							alwaystransparent = yes
						}
					}
				}
			}

			### list with content
			scrollarea = {
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding
				scrollbarpolicy_horizontal = always_off

				scrollbar_vertical = {
					using = vertical_scrollbar
				}

				scrollwidget = {
					flowcontainer = {
						using = default_list_position
						direction = vertical

						block "scrollarea_content" {
							flowcontainer = {
								onmousehierarchyenter = "[SetCanOpenRightClickContextMenu( Not(MapListPanelManager.HasCurrentInteraction) )]"
								onmousehierarchyleave = "[SetCanOpenRightClickContextMenu( '(bool)yes' )]"
								parentanchor = hcenter
								direction = vertical
								datamodel = "[MapListPanel.AccessValidOptions]"

								block "item" {
									block "item" {
										item = {
											map_list_panel_item = {}
										}
									}
								}

								block "empty_state" {
									empty_state = {
										blockoverride "visible" {
											visible = "[IsDataModelEmpty(MapListPanel.AccessValidOptions)]"
										}
										blockoverride "text" {
											text = "MAP_LIST_NO_AVAILABLE_OPTIONS"
										}
									}
								}
							}

							widget = { 
								size = { 10 10 }
							}

							section_header_button = {
								visible = "[GreaterThan_int32(GetDataModelSize(MapListPanel.AccessFailedOptions), '(int32)0')]"
								blockoverride "left_text" {
									text = "FAILED_OPTIONS"
								}

								blockoverride "onclick" {
									onclick = "[MapListPanelManager.ToggleFailedOptions]"
								}

								blockoverride "onclick_showmore" {
									visible = "[Not(MapListPanelManager.IsShowingFailedOptions)]"
								}

								blockoverride "onclick_showless" {
									visible = "[MapListPanelManager.IsShowingFailedOptions]"
								}
							}

							flowcontainer = {
								direction = vertical
								parentanchor = hcenter
								visible = "[Not(IsDataModelEmpty(MapListPanel.AccessFailedOptions))]"

								fixedgridbox = {
									visible = "[MapListPanelManager.IsShowingFailedOptions]"
									datamodel = "[MapListPanel.AccessFailedOptions]"
									addcolumn = 540
									addrow = 40
									block "item" {
										item = {
											map_list_panel_item = {}
										}
									}
								}
							}

							section_header_button = {
								visible = "[GreaterThan_int32(GetDataModelSize(MapListPanel.AccessInvalidOptions), '(int32)0')]"
								blockoverride "left_text" {
									text = "INVALID_OPTIONS"
								}

								blockoverride "onclick" {
									onclick = "[MapListPanelManager.ToggleInvalidOptions]"
								}

								blockoverride "onclick_showmore" {
									visible = "[Not(MapListPanelManager.IsShowingInvalidOptions)]"
								}

								blockoverride "onclick_showless" {
									visible = "[MapListPanelManager.IsShowingInvalidOptions]"
								}
							}

							flowcontainer = {
								direction = vertical
								parentanchor = hcenter
								visible = "[Not(IsDataModelEmpty(MapListPanel.AccessInvalidOptions))]"

								fixedgridbox = {
									visible = "[MapListPanelManager.IsShowingInvalidOptions]"
									datamodel = "[MapListPanel.AccessInvalidOptions]"
									addcolumn = 540
									addrow = 40
									block "item" {
										item = {
											map_list_panel_item = {}
										}
									}
								}
							}

							widget = { 
								size = { 10 10 }
							}
						}
					}
				}
			}
		}
	}

	type country_map_list_one_value = map_list_panel {
		# name = "countries_map_list_panel"

		blockoverride "header_close_button" {
			onclick = "[MapListPanelManager.CloseCurrentPanel]"
		}

		blockoverride "headers" {
			sort_button = {
				size = { 55 40 }
				onclick = "[MapListPanel.Sort('rank')]"

				button = {
					texture = "gfx/interface/buttons/sort_button_icons/sort_icon_rank.dds"
					size = { 25 25 }
					parentanchor = center
					alwaystransparent = yes
				}

				tooltip = "SORT_BY_RANK"

				blockoverride "selected_visibility" {
					visible = no
				}
			}
			sort_button = {
				align = left|nobaseline
				text = "COUNTRY"
				size = { 295 20 }
				onclick = "[MapListPanel.Sort('name')]"
			}
			sort_button = {
				align = hcenter|nobaseline
				size = { 190 20 }
				block "shown_on_map_header" {
					text = "concept_prestige"
					tooltip = "PRESTIGE"
					onclick = "[MapListPanel.Sort('prestige')]"
				}
			}
		}

		blockoverride "values" {
			widget = {
				size = { 50 40 }
				parentanchor = left|vcenter
				alwaystransparent = no
				tooltip = "[Country.GetRankTooltip]"

				rank_badge = {
					size = { 50 50 }
					parentanchor = right|vcenter
					position = { -2 0 }
					
					blockoverride "datacontext " {
						datacontext = "[MapListOption.GetCountryData.GetCountry]" 
					}

					blockoverride "rank_text" {
						raw_text = "#BOLD [Country.GetCountryScorePositionDesc]"
					}
					blockoverride "rank_text_2" {
						raw_text = "#BOLD [Country.GetCountryScorePositionDesc]"
						visible = no
					}
				}
			}
			
			textbox = {
				margin = { 5 0 }
				size = { 295 25 }
				align = left|nobaseline
				text = "[MapListOption.GetCountryData.GetCountry.GetName]"
				parentanchor = vcenter
				elide = right
			}

			textbox = {
				datacontext = "[MapListOption.GetCountryData.GetCountry]"
				margin = { 5 0 }
				size = { 180 25 }
				align = right|nobaseline
				parentanchor = vcenter
				elide = right
				block "shown_on_map_value" {
					text = "[Country.GetPrestige|1v]"
					tooltip = "[Country.GetRankTooltip]"
				}
			}
		}

		blockoverride "interaction" {
			datacontext = "[MapListOption.GetCountryData.GetCountry]"
			onclick = "[InformationPanelBar.OpenCountryPanel(Country.Self)]"
			onrightclick = "[RightClickMenuManager.ShowForCountry(Country.AccessSelf)]"
			onmousehierarchyenter = "[AccessHighlightManager.HighlightCountry(Country.Self)]"
			onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
		}
	}

	### COUNTRIES
	type countries_map_list_panel_full = map_list_panel {

		blockoverride "header_close_button" {
			onclick = "[MapListPanelManager.CloseCurrentPanel]"
		}

		blockoverride "button_color" {
			color = "[Country.GetDiplomaticStatusColor( GetPlayer.Self )]"
		}

		blockoverride "headers" {
			sort_button = {
				size = { 55 40 }
				onclick = "[MapListPanel.Sort('rank')]"

				button = {
					texture = "gfx/interface/buttons/sort_button_icons/sort_icon_rank.dds"
					size = { 25 25 }
					parentanchor = center
					alwaystransparent = yes
				}

				tooltip = "SORT_BY_RANK"

				blockoverride "selected_visibility" {
					visible = no
				}
			}

			sort_button = {
				align = left|nobaseline
				text = "concept_country"
				size = { 150 20 }
				onclick = "[MapListPanel.Sort('name')]"

				blockoverride "selected_visibility" {
					visible = no
				}
			}

			sort_button = {
				align = hcenter|nobaseline
				size = { 80 20 }
				text = "concept_prestige"
				onclick = "[MapListPanel.Sort('prestige')]"

				blockoverride "selected_visibility" {
					visible = no
				}
			}

			sort_button = {
				align = hcenter|nobaseline
				size = { 80 20 }
				text = "concept_gdp_short"
				onclick = "[MapListPanel.Sort('gdp')]"

				blockoverride "selected_visibility" {
					visible = no
				}
			}

			sort_button = {
				align = hcenter|nobaseline
				size = { 70 20 }
				text = "SOL_SHORT_TEXT"
				onclick = "[MapListPanel.Sort('sol')]"

				blockoverride "selected_visibility" {
					visible = no
				}
			}

			sort_button = {
				align = hcenter|nobaseline
				size = { 105 20 }
				text = "concept_population"
				onclick = "[MapListPanel.Sort('population')]"

				blockoverride "selected_visibility" {
					visible = no
				}
			}
		}

		blockoverride "values" {
			datacontext = "[MapListOption.GetCountryData.GetCountry]"
			widget = {
				size = { 50 40 }
				parentanchor = left|vcenter
				alwaystransparent = no
				tooltip = "[Country.GetRankTooltip]"

				rank_badge = {
					size = { 50 50 }
					parentanchor = right|vcenter
					position = { -2 0 }
					
					blockoverride "datacontext " {
						datacontext = "[MapListOption.GetCountryData.GetCountry]" 
					}

					blockoverride "rank_text" {
						raw_text = "#BOLD [Country.GetCountryScorePositionDesc]"
					}
					blockoverride "rank_text_2" {
						raw_text = "#BOLD [Country.GetCountryScorePositionDesc]"
						visible = no
					}
				}
			}

			textbox = {
				margin = { 5 0 }
				size = { 150 25 }
				align = left|nobaseline
				text = "[Country.GetName]"
				parentanchor = vcenter
				elide = right
			}

			textbox = {
				margin = { 5 0 }
				size = { 80 25 }
				align = right|nobaseline
				parentanchor = vcenter
				elide = right
				text = "[Country.GetPrestige|1v]"
				tooltip = "[Country.GetRankTooltip]"
				alpha = "[TransparentIfZero_int32(Country.GetPrestige)]"
			}
			textbox = {
				margin = { 5 0 }
				size = { 80 25 }
				align = right|nobaseline
				parentanchor = vcenter
				elide = right
				using = GDP_tooltip_with_graph
				raw_text = "#variable [Country.GetGDP|1*]#!"
			}
			textbox = {
				margin = { 5 0 }
				size = { 70 25 }
				align = right|nobaseline
				parentanchor = vcenter
				elide = right
				using = average_standard_of_living_tooltip_with_graph
				text = "[Country.GetAverageSoLByPopulation|v1]"
			}
			textbox = {
				margin = { 5 0 }
				size = { 100 25 }
				align = right|nobaseline
				parentanchor = vcenter
				elide = right
				using = population_tooltip_with_graph
				raw_text = "#variable [Country.GetTotalPopulation|D]#!"
			}
		}

		blockoverride "interaction" {
			datacontext = "[MapListOption.GetCountryData.GetCountry]"
			onclick = "[InformationPanelBar.OpenCountryPanel(Country.Self)]"
			onrightclick = "[RightClickMenuManager.ShowForCountry(Country.AccessSelf)]"
			onmousehierarchyenter = "[AccessHighlightManager.HighlightCountry(Country.Self)]"
			onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
		}
	}

	type state_map_list_one_value = map_list_panel {
		# name = "states_map_list_panel"

		blockoverride "header_close_button" {
			onclick = "[MapListPanelManager.CloseCurrentPanel]"
		}

		blockoverride "headers" {
			sort_button = {
				align = left|nobaseline
				text = "STATE"
				size = { 355 20 }
				onclick = "[MapListPanel.Sort('name')]"
			}
			sort_button = {
				align = hcenter|nobaseline
				size = { 185 20 }
				block "shown_on_map_header" {
					raw_text = "A Value type"
					raw_tooltip = "A tooltip"
					#onclick = "[MapListPanel.Sort('something')]"
				}
			}
		}

		blockoverride "values" {
			textbox = {
				margin = { 5 0 }
				size = { 350 25 }
				align = left|nobaseline
				text = "[MapListOption.GetStateData.GetState.GetOwner.GetFlagTextIcon]  [MapListOption.GetStateData.GetState.GetName]"
				parentanchor = vcenter
				elide = right
			}

			textbox = {
				datacontext = "[MapListOption.GetStateData.GetState]"
				margin = { 5 0 }
				size = { 180 25 }
				align = right|nobaseline
				parentanchor = vcenter
				elide = right
				block "shown_on_map_value" {
					raw_text = "#todo A Value#!"
					raw_tooltip = "#todo A tooltip#!"
				}
			}
		}

		blockoverride "interaction" {
			datacontext = "[MapListOption.AccessStateData.AccessState]"
			onclick = "[InformationPanelBar.OpenStatePanel(State.AccessSelf)]"
			onrightclick = "[RightClickMenuManager.ShowForState(State.AccessSelf)]"
			onmousehierarchyenter = "[AccessHighlightManager.HighlightState(State.Self)]"
			onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
		}
	}

	type empty_map_list_panel = map_list_panel {
		name = "empty_map_list_panel"

		blockoverride "title" {
			text = "No active interaction."
		}

		blockoverride "headers" {
		}

		blockoverride "scrollarea_content" {
		}
	}

	type default_map_list_panel = map_list_panel {
		name = "default_map_list_panel"

		blockoverride "item" {
			item = {
				map_list_panel_item_interaction = {}
			}
		}
	}

	### BUILD BUILDINGS IS IN A SEPARATE FILE FOR 1.6 TO AVOID MERGE CONFLICTS (map_list_panel_one_point_six.gui)

	### COLONIES
	type colony_map_list_panel = map_list_panel {
		name = "colony_map_list_panel"

		blockoverride "headers" {
			sort_button = {
				align = left|nobaseline
				margin = { 10 0 }
				text = "COLONY_MAP_LIST_PANEL_STATE_HEADER"
				tooltip = "COLONY_MAP_LIST_PANEL_STATE_HEADER_TOOLTIP"
				size = { 160 20 }
				onclick = "[MapListPanel.Sort('state')]"
			}

			sort_button = {
				align = left|nobaseline
				margin = { 10 0 }
				text = "COLONY_MAP_LIST_PANEL_REGION_HEADER"
				tooltip = "COLONY_MAP_LIST_PANEL_REGION_HEADER_TOOLTIP"
				size = { 205 20 }
				onclick = "[MapListPanel.Sort('region')]"
			}

			sort_button = {
				align = left|nobaseline
				margin = { 10 0 }
				text = "COLONY_MAP_LIST_PANEL_STATE_TRAITS_HEADER"
				tooltip = "COLONY_MAP_LIST_PANEL_STATE_TRAITS_HEADER_TOOLTIP"
				size = { 120 20 }
				enabled = no
			}

			sort_button = {
				align = center|nobaseline
				tooltip = "COLONY_MAP_LIST_PANEL_STATUS_HEADER_TOOLTIP"
				size = { 55 20 }
				onclick = "[MapListPanel.Sort('status')]"
				button = {
					texture = "gfx/interface/buttons/sort_button_icons/sort_icon_status.dds"
					size = { 25 25 }
					parentanchor = center
					alwaystransparent = yes
				}
			}
		}

		blockoverride "item" {
			item = {
				map_list_panel_item_interaction = {
					blockoverride "values" {
						textbox = {
							size = { 160 25 }
							align = left|nobaseline
							text = "[MapListOption.GetColonyData.GetState]"
							parentanchor = vcenter
							elide = right
							margin_left = 10
						}

						textbox = {
							size = { 205 25 }
							align = left|nobaseline
							text = "[MapListOption.GetColonyData.GetRegion]"
							parentanchor = vcenter
							elide = right
							margin_left = 10
						}

						flowcontainer = {
							datamodel = "[MapListOption.GetColonyData.GetStateRegion.AccessTraits]"
							parentanchor = vcenter
							spacing = 5
							minimumsize = { 120 -1 }
							maximumsize = { 120 -1 }

							item = {
								icon = {
									size = { 35 35 }
									tooltip = TOOLTIP_STATE_TRAIT
									onmousehierarchyenter = "[AccessHighlightManager.HighlightStateTrait(StateTrait.Self)]"
									onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
									alwaystransparent = no
									texture = "[StateTrait.GetTexture]"
								}
							}
						}
					}
				}
			}
		}
	}

	### DIPLO ACTIONS
	type diplo_action_map_list_panel = map_list_panel {
		name = "diplo_action_map_list_panel"

		blockoverride "headers" {
			sort_button = {
				align = center|nobaseline
				text = "DIPLO_ACTION_LIST_PANEL_STATUS_HEADER"
				tooltip = "DIPLO_ACTION_LIST_PANEL_STATUS_HEADER_TOOLTIP"
				size = { 260 20 }
				onclick = "[MapListPanel.Sort('country')]"
			}
			sort_button = {
				align = center|nobaseline
				text = "TRADE_ROUTES_SORT_COST"
				size = { 105 20 }
				onclick = "[MapListPanel.Sort('cost')]"
			}

			sort_button = {
				align = center|nobaseline
				text = "ACCEPTANCE"
				size = { 120 20 }
				onclick = "[MapListPanel.Sort('acceptance')]"
			}

			sort_button = {
				align = center|nobaseline
				tooltip = "DEFAULT_MAP_LIST_PANEL_STATUS_HEADER_TOOLTIP"
				size = { 55 20 }
				onclick = "[MapListPanel.Sort('status')]"
				button = {
					texture = "gfx/interface/buttons/sort_button_icons/sort_icon_status.dds"
					size = { 25 25 }
					parentanchor = center
					alwaystransparent = yes
				}
			}
		}

		blockoverride "item" {
			item = {
				map_list_panel_item_interaction = {
					blockoverride "name_button_visibility" {
						visible = yes
					}

					blockoverride "name_button_size" {
						size = { 255 40 }
					}

					blockoverride "name_button_properties" {
						onclick = "[InformationPanelBar.OpenCountryPanel(MapListOption.GetDiploActionData.GetDiplomaticAction.GetSecondCountry)]"
						onrightclick = "[RightClickMenuManager.ShowForCountry(MapListOption.GetDiploActionData.GetDiplomaticAction.GetSecondCountry)]"

						tooltipwidget = {
							FancyTooltip_Country = {
								datacontext = "[MapListOption.GetDiploActionData.GetDiplomaticAction.GetSecondCountry]"
							}
						}
						
						textbox = {
							margin = { 10 0 }
							size = { 250 25 }
							align = left|nobaseline
							text = "[MapListOption.GetDiploActionData.GetDiplomaticAction.GetSecondCountry.GetName]"
							parentanchor = vcenter
							elide = right
							fontsize_min = 12
						}
					}

					blockoverride "values" {
						datacontext = "[MapListOption.GetDiploActionData.GetDiplomaticAction]"
						
						textbox = {
							raw_text = "@inf! [DiplomaticAction.GetMaintenanceCost|v0]"
							tooltip = "[DiplomaticAction.GetMaintenanceCostDetailsDesc]"
							parentanchor = vcenter
							align = right|nobaseline
							size = { 105 25 }
							alpha = "[TransparentIfZero(DiplomaticAction.GetMaintenanceCost)]"
						}

						container = {
							parentanchor = center
							minimumsize = { 120 -1 }
							diplomatic_action_acceptance_icon = {
								blockoverride "parentanchor" {
									parentanchor = center
								}
							}

							textbox = {
								visible = "[Not(DiplomaticAction.RequiresApproval)]"
								text = "NOT_AVAILABLE"
								autoresize = yes
								align = nobaseline
								parentanchor = center
								alpha = 0.5
							}
						}

						widget = { size = { 5 5 }}
					}
				}
			}
		}
	}

	### DIPLO ACTIONS - Rivalry
	type diplo_action_rivalry_map_list_panel = map_list_panel {
		name = "diplo_action_rivalry_map_list_panel"

		blockoverride "headers" {
			sort_button = {
				align = center|nobaseline
				text = "DIPLO_ACTION_LIST_PANEL_STATUS_HEADER"
				tooltip = "DIPLO_ACTION_LIST_PANEL_STATUS_HEADER_TOOLTIP"
				size = { 260 20 }
				onclick = "[MapListPanel.Sort('country')]"
			}

			sort_button = {
				align = center|nobaseline
				text = "DIPLO_ACTION_LIST_PANEL_STATUS_RIVALRY_GAINS"
				tooltip = "DIPLO_ACTION_LIST_PANEL_STATUS_RIVALRY_GAINS_TOOLTIP"
				size = { 105 20 }
				onclick = "[MapListPanel.Sort('gains')]"
			}

			sort_button = {
				align = center|nobaseline
				text = "ACCEPTANCE"
				size = { 120 20 }
				onclick = "[MapListPanel.Sort('acceptance')]"
			}

			sort_button = {
				align = center|nobaseline
				tooltip = "DEFAULT_MAP_LIST_PANEL_STATUS_HEADER_TOOLTIP"
				size = { 55 20 }
				onclick = "[MapListPanel.Sort('status')]"
				button = {
					texture = "gfx/interface/buttons/sort_button_icons/sort_icon_status.dds"
					size = { 25 25 }
					parentanchor = center
					alwaystransparent = yes
				}
			}
		}

		blockoverride "item" {
			item = {
				map_list_panel_item_interaction = {
					blockoverride "name_button_visibility" {
						visible = yes
					}

					blockoverride "name_button_size" {
						size = { 255 40 }
					}

					blockoverride "name_button_properties" {
						onclick = "[InformationPanelBar.OpenCountryPanel(MapListOption.GetDiploActionData.GetDiplomaticAction.GetSecondCountry)]"
						onrightclick = "[RightClickMenuManager.ShowForCountry(MapListOption.GetDiploActionData.GetDiplomaticAction.GetSecondCountry)]"

						tooltipwidget = {
							FancyTooltip_Country = {
								datacontext = "[MapListOption.GetDiploActionData.GetDiplomaticAction.GetSecondCountry]"
							}
						}
						
						textbox = {
							margin = { 10 0 }
							size = { 250 25 }
							align = left|nobaseline
							text = "[MapListOption.GetDiploActionData.GetDiplomaticAction.GetSecondCountry.GetName]"
							parentanchor = vcenter
							elide = right
							fontsize_min = 12
						}
					}

					blockoverride "values" {
						datacontext = "[MapListOption.GetDiploActionData.GetDiplomaticAction]"
						
						textbox = {
							raw_text = "@inf! [DiplomaticAction.GetRivalryGains|v0=+]"
							tooltip = "[DiplomaticAction.GetRivalryGainsDetailsDesc]"
							parentanchor = vcenter
							align = center|nobaseline
							size = { 110 25 }
							alpha = "[TransparentIfZero(DiplomaticAction.GetRivalryGains)]"
						}

						container = {
							parentanchor = center
							minimumsize = { 115 -1 }
							diplomatic_action_acceptance_icon = {
								blockoverride "parentanchor" {
									parentanchor = center
								}
							}

							textbox = {
								visible = "[Not(DiplomaticAction.RequiresApproval)]"
								text = "NOT_AVAILABLE"
								autoresize = yes
								align = nobaseline
								parentanchor = center
								alpha = 0.5
							}
						}

						widget = { size = { 5 5 }}
					}
				}
			}
		}
	}

	### DECREES
	type decree_map_list_panel = map_list_panel {
		name = "decree_map_list_panel"

		blockoverride "headers" {
			sort_button = {
				size = { 415 30 }
				align = center|nobaseline
				text = "DECREE_LIST_PANEL_STATE_HEADER"
				tooltip = "DECREE_LIST_PANEL_STATE_HEADER_TOOLTIP"
				onclick = "[MapListPanel.Sort('state')]"
			}

			sort_button = {
				visible = yes
				size = { 70 30 }
				align = center|nobaseline
				text = "DECREE_LIST_PANEL_COST_HEADER"
				tooltip = "DECREE_LIST_PANEL_COST_HEADER_TOOLTIP"
				onclick = "[MapListPanel.Sort('cost')]"
			}

			sort_button = {
				size = { 55 20 }
				tooltip = "DECREE_MAP_LIST_PANEL_STATUS_HEADER_TOOLTIP"
				onclick = "[MapListPanel.Sort('status')]"
				button = {
					texture = "gfx/interface/buttons/sort_button_icons/sort_icon_status.dds"
					size = { 25 25 }
					parentanchor = center
					alwaystransparent = yes
				}
			}
		}

		blockoverride "item" {
			item = {
				map_list_panel_item_interaction = {
					blockoverride "name_button_visibility" {
						visible = yes
					}

					blockoverride "name_button_size" {
						size = { 415 40 }
					}

					blockoverride "name_button_properties" {

						datacontext = "[MapListOption.GetDecreeData.GetState]"

						onmousehierarchyenter = "[AccessHighlightManager.HighlightState(State.Self)]"
						onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"

						onclick = "[InformationPanelBar.OpenStatePanel(State.AccessSelf)]"
						onrightclick = "[RightClickMenuManager.ShowForState(State.AccessSelf)]"
						
						tooltipwidget = {
							FancyTooltip_State = {}
						}

						textbox = {
							visible = "[Not(And(State.IsUnincorporated, Not(State.IsIncorporating)))]"
							margin = { 10 0 }
							size = { 410 25 }
							align = left|nobaseline
							text = "[State.GetNameNoFormatting]"
							parentanchor = vcenter
							elide = right
							fontsize_min = 12
						}

						textbox = {
							visible = "[And(State.IsUnincorporated, Not(State.IsIncorporating))]"
							margin = { 10 0 }
							size = { 390 25 }
							align = left|nobaseline
							text = "[State.GetNameNoFormatting]"
							parentanchor = vcenter
							elide = right
							fontsize_min = 12
						}

						icon = {
							visible = "[And(State.IsUnincorporated, Not(State.IsIncorporating))]"
							parentanchor = right|vcenter
							position = { -10 0 }
							size = { 25 25 }
							texture = "gfx/interface/icons/state_status_icons/unincorporated_state.dds"
						}
					}

					blockoverride "values" {
						textbox = {
							parentanchor = vcenter
							#"[ObjectsEqual(MapListDecreePanel.GetDecreeType, GetDecreeType('decree_road_maintenance'))]"
							text = "MAP_LIST_DECREE_COST"
							size = { 70 30 }
							align = left|nobaseline
							margin_left = 10
							elide = right
							fontsize_min = 12
						}
					}
				}
			}
		}
	}

	### FORMATIONS
	type military_formation_map_list_panel = map_list_panel {
		name = "military_formation_map_list_panel"

		blockoverride "headers" {
			sort_button = {
				size = { 385 30 }
				align = center|nobaseline
				text = "MILITARY_FORMATION_LIST_PANEL_DESTINATION_HEADER"
				tooltip = "MILITARY_FORMATION_LIST_PANEL_DESTINATION_HEADER_TOOLTIP"
				onclick = "[MapListPanel.Sort('destination')]"
			}

			sort_button = {
				visible = yes
				size = { 100 30 }
				align = center|nobaseline
				text = "MILITARY_FORMATION_LIST_PANEL_TRAVEL_TIME_HEADER"
				tooltip = "MILITARY_FORMATION_LIST_PANEL_TRAVEL_TIME_HEADER_TOOLTIP"
				onclick = "[MapListPanel.Sort('travel_time')]"
			}

			sort_button = {
				size = { 55 20 }
				tooltip = "MILITARY_FORMATION_MAP_LIST_PANEL_STATUS_HEADER_TOOLTIP"
				onclick = "[MapListPanel.Sort('status')]"
				button = {
					texture = "gfx/interface/buttons/sort_button_icons/sort_icon_status.dds"
					size = { 25 25 }
					parentanchor = center
					alwaystransparent = yes
				}
			}
		}

		blockoverride "item" {
			item = {
				map_list_panel_item_interaction = {
					blockoverride "values" {
						textbox = {
							parentanchor = vcenter
							text = "[MapListOption.GetTitle]"
							size = { 385 30 }
							align = left|nobaseline
							margin_left = 10
							elide = right
							fontsize_min = 12
						}

						textbox = {
							parentanchor = vcenter
							text = "MAP_LIST_MILITARY_FORMATION_TRAVEL_TIME"
							size = { 100 30 }
							align = left|nobaseline
							margin_left = 10
							elide = right
							fontsize_min = 12
						}
					}
				}
			}
		}
	}

	type military_formation_deploy_map_list_panel = map_list_panel {
		name = "military_formation_deploy_map_list_panel"

		blockoverride "headers" {
			sort_button = {
				size = { 192 20 }
				align = center|nobaseline
				text = "MILITARY_FORMATION_LIST_PANEL_DESTINATION_HEADER"
				tooltip = "MILITARY_FORMATION_LIST_PANEL_DESTINATION_HEADER_TOOLTIP"
				onclick = "[MapListPanel.Sort('destination')]"
			}

			sort_button = {
				align = center|nobaseline
				text = "MILITARY_FORMATION_LIST_PANEL_ADVANTAGE_HEADER"
				tooltip = "MILITARY_FORMATION_LIST_PANEL_ADVANTAGE_HEADER_TOOLTIP"
				size = { 98 20 }
				onclick = "[MapListPanel.Sort('advantage')]"
			}

			sort_button = {
				size = { 98 20 }
				align = center|nobaseline
				text = "MILITARY_FORMATION_LIST_PANEL_UNITS_HEADER"
				tooltip = "MILITARY_FORMATION_LIST_PANEL_UNITS_HEADER_TOOLTIP"
				onclick = "[MapListPanel.Sort('units')]"
			}

			sort_button = {
				visible = yes
				size = { 98 20 }
				align = center|nobaseline
				text = "MILITARY_FORMATION_LIST_PANEL_TRAVEL_TIME_HEADER"
				tooltip = "MILITARY_FORMATION_LIST_PANEL_TRAVEL_TIME_HEADER_TOOLTIP"
				onclick = "[MapListPanel.Sort('travel_time')]"
			}

			sort_button = {
				size = { 55 20 }
				tooltip = "MILITARY_FORMATION_MAP_LIST_PANEL_STATUS_HEADER_TOOLTIP"
				onclick = "[MapListPanel.Sort('status')]"
				button = {
					texture = "gfx/interface/buttons/sort_button_icons/sort_icon_status.dds"
					size = { 25 25 }
					parentanchor = center
					alwaystransparent = yes
				}
			}
		}

		blockoverride "item" {
			item = {
				map_list_panel_item_interaction = {
					datacontext = "[MapListOption.GetFrontData.GetFront]"

					blockoverride "name_button_visibility" {
						visible = yes
					}

					blockoverride "name_button_size" {
						size = { 192 40 }
					}

					blockoverride "name_button_properties" {
						onmousehierarchyenter = "[AccessHighlightManager.HighlightFront( Front.Self )]"
						onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"

						onclick = "[InformationPanelBar.OpenFrontPanel(Front.AccessSelf)]"

						textbox = {
							margin = { 10 0 }
							size = { 192 25 }
							align = left|nobaseline
							text = "[MapListOption.GetTitle]"
							parentanchor = vcenter
							elide = right
							fontsize_min = 14
						}
					}

					blockoverride "values" {						
						textbox = {
							visible = "[Not(StringIsEmpty( Front.GetPlayerAdvantageDesc ))]"
							tooltip = "[Front.GetPlayerAdvantageDesc]"
							raw_text = "#v [Front.GetPlayerAdvantageRaw|+]#!"
							size = { 98 25 }
							align = hcenter|nobaseline
							elide = right
							parentanchor = center
						}

						textbox = {
							margin = { 5 0 }
							size = { 98 25 }
							align = hcenter|nobaseline
							tooltip = "[Front.GetPlayerSideUnitsTooltip]"
							raw_text = "MAP_LIST_MILITARY_FORMATION_UNITS"
							parentanchor = vcenter
							elide = right
							using = tooltip_above
						}

						textbox = {
							parentanchor = vcenter
							text = "MAP_LIST_MILITARY_FORMATION_TRAVEL_TIME"
							size = { 98 30 }
							align = left|nobaseline
							margin_left = 10
							elide = right
							fontsize_min = 12
						}
					}

					blockoverride "interaction" {
						enabled = "[MapListOption.CanClick]"
						onclick = "[MapListOption.OnClick]"
						onmousehierarchyenter = "[AccessHighlightManager.HighlightFront( Front.Self )]"
						onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
					}
				}
			}
		}
	}

	### MARKETS
	type markets_map_list_panel = map_list_panel {
		name = "markets_map_list_panel"

		blockoverride "header_close_button" {
			onclick = "[MapListPanelManager.CloseCurrentPanel]"
		}

		blockoverride "headers" {
			sort_button = {
				align = left|nobaseline
				text = "MARKET"
				size = { 430 20 }
				onclick = "[MapListPanel.Sort('name')]"
			}
			sort_button = {
				align = hcenter|nobaseline
				text = "GDP_SHORT"
				tooltip = "GDP"
				size = { 110 20 }
				onclick = "[MapListPanel.Sort('gdp')]"
			}
		}

		blockoverride "values" {
			textbox = {
				margin = { 5 0 }
				size = { 430 25 }
				align = left|nobaseline
				text = "[MapListOption.GetMarketData.GetMarket.GetName]"
				parentanchor = vcenter
				elide = right
			}

			textbox = {
				datacontext = "[MapListOption.GetMarketData.GetMarket]"
				margin = { 5 0 }
				size = { 100 25 }
				align = right|nobaseline
				raw_text = "@money![Market.GetMarketGDPValue|Dv]"
				parentanchor = vcenter
				elide = right
			}
		}

		blockoverride "interaction" {
			onclick = "[InformationPanelBar.OpenMarketPanel(MapListOption.AccessMarketData.AccessMarket)]"
			onrightclick = "[RightClickMenuManager.ShowForMarket(MapListOption.AccessMarketData.AccessMarket)]"
			onmousehierarchyenter = "[AccessHighlightManager.HighlightMarket(MapListOption.GetMarketData.GetMarket)]"
			onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
		}
	}

	### STRATEGIC REGIONS
	type strategic_regions_map_list_panel = map_list_panel {
		name = "strategic_regions_map_list_panel"

		blockoverride "header_close_button" {
			onclick = "[MapListPanelManager.CloseCurrentPanel]"
		}

		blockoverride "itemvisibility" {
			visible = "[MapListOption.GetStrategicRegionData.GetStrategicRegion.IsLand]"
		}

		blockoverride "headers" {
			sort_button = {
				align = left|nobaseline
				text = "concept_strategic_region"
				size = { 140 20 }
				onclick = "[MapListPanel.Sort('name')]"
			}

			sort_button = {
				align = left|nobaseline
				size = { 300 20 }
			}
			sort_button = {
				align = hcenter|nobaseline
				text = "GDP_SHORT"
				size = { 100 20 }
				onclick = "[MapListPanel.Sort('gdp')]"
			}
		}

		blockoverride "values" {
			textbox = {
				margin = { 5 0 }
				size = { 135 25 }
				align = left|nobaseline
				text = "[MapListOption.GetStrategicRegionData.GetStrategicRegion.GetName]"
				parentanchor = vcenter
				elide = right
			}
			widget = {
				size = { 300 25 }
				parentanchor = vcenter

				overlappingitembox = {
					size = { 300 25 }
					datacontext = "[MapListOption.GetStrategicRegionData.GetStrategicRegion]"
					datamodel = "[StrategicRegion.GetInterests]"

					item = {
						container = {
							tooltip = "INTEREST_MARKER_TOOLTIP"
							using = tooltip_above

							widget = {
								size = { 35 33 }

								tiny_flag = {
									position = { 0 -2 }
									visible = "[Not(Interest.IsActive)]"
									datacontext = "[Interest.GetOwner]"
									blockoverride "tooltip" {}
									parentanchor = center
									alpha = 0.3
								}
								tiny_flag = {
									position = { 0 -2 }
									visible = "[Interest.IsActive]"
									datacontext = "[Interest.GetOwner]"
									blockoverride "tooltip" {}
									parentanchor = center
								}

								widget = {
									size = { 25 4 }
									position = { 0 12 }
									visible = "[Interest.ShouldShowProgressBar]"
									parentanchor = center

									bad_progressbar_horizontal = {
										visible = "[Interest.IsActive]"
										size = { 100% 100% }
										blockoverride "values" {
											min = 0
											max = 1
											value = "[Interest.GetProgress]"
										}
									}

									default_progressbar_horizontal = {
										visible = "[Not(Interest.IsActive)]"
										size = { 100% 100% }
										blockoverride "values" {
											min = 0
											max = 1
											value = "[Interest.GetProgress]"
										}
									}
								}
							}
						}
					}
				}
			}

			textbox = {
				margin = { 5 0 }
				size = { 95 25 }
				align = right|nobaseline
				raw_text = "@money![MapListOption.GetStrategicRegionData.GetStrategicRegion.GetTotalGDP|Dv]"
				parentanchor = vcenter
				elide = right
			}
		}

		blockoverride "interaction" {
			onmousehierarchyenter = "[AccessHighlightManager.HighlightStrategicRegion(MapListOption.GetStrategicRegionData.GetStrategicRegion)]"
			onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
		}
	}

	### INTEREST GROUPS
	type interest_groups_map_list_panel = map_list_panel {
		name = "interest_groups_map_list_panel"

		blockoverride "header_close_button" {
			onclick = "[MapListPanelManager.CloseCurrentPanel]"
		}

		blockoverride "headers" {
			sort_button = {
				align = left|nobaseline
				text = "concept_interest_group"
				size = { 420 20 }
				onclick = "[MapListPanel.Sort('name')]"
			}
			sort_button = {
				align = hcenter|nobaseline
				text = "concept_clout"
				size = { 130 20 }
				onclick = "[MapListPanel.Sort('clout')]"
			}
		}

		blockoverride "values" {
			textbox = {
				margin = { 5 0 }
				size = { 400 25 }
				align = left|nobaseline
				text = "[MapListOption.GetInterestGroupData.GetInterestGroup.GetName]"
				parentanchor = vcenter
				elide = right
			}

			textbox = {
				datacontext = "[MapListOption.GetInterestGroupData.GetInterestGroup]"
				margin = { 5 0 }
				size = { 120 25 }
				align = right|nobaseline
				text = "[InterestGroup.GetClout|1%v]"
				parentanchor = vcenter
				elide = right
				using = clout_tooltip_with_graph
			}
		}

		blockoverride "interaction" {
			onclick = "[InformationPanelBar.OpenInterestGroupPanel(MapListOption.AccessInterestGroupData.AccessInterestGroup)]"
			onrightclick = "[RightClickMenuManager.ShowForIG(MapListOption.AccessInterestGroupData.AccessInterestGroup)]"
		}
	}

	type countries_map_list_panel = countries_map_list_panel_full {
		name = "countries_map_list_panel"
	}

	type countries_ongoing_diplomatic_play_map_list_panel = countries_map_list_panel_full {
		name = "countries_ongoing_diplomatic_play_map_list_panel"
	}

	### COUNTRY ATTITUDE
	type country_attitude_map_list_panel = country_map_list_one_value {
		name = "country_attitude_map_list_panel"

		blockoverride "shown_on_map_header" {
			text = "concept_attitude"
			onclick = "[MapListPanel.Sort('attitude')]"
		}
		blockoverride "shown_on_map_value" {
			visible = "[Not(ObjectsEqual(Country.Self, GetPlayer.Self))]"
			text = "[Country.GetAttitudeTowards(GetPlayer).GetName]"
			tooltip = "[Country.GetAttitudeTowards(GetPlayer).GetTooltip]"
		}

		blockoverride "button_color" {
			color = "[Country.GetAttitudeTowards( GetPlayer.Self ).GetColor]"
		}
	}

	### COUNTRY RELATIONS
	type country_relations_map_list_panel = country_map_list_one_value {
		name = "country_relations_map_list_panel"

		blockoverride "shown_on_map_header" {
			text = "concept_relations"
			onclick = "[MapListPanel.Sort('relations')]"
		}
		blockoverride "shown_on_map_value" {
			visible = "[Not(ObjectsEqual(Country.Self, GetPlayer.Self))]"
			tooltip = "[GetPlayer.GetRelationsTooltip( Country.Self )]"
			raw_text = "[Country.GetRelationsWithDesc( GetPlayer )] ([Country.GetRelationsWith(GetPlayer)|+=])"
		}

		blockoverride "button_color" {
			color = "[Country.GetRelationsColor( GetPlayer.Self )]"
		}
	}

	### COUNTRY INFAMY
	type country_infamy_map_list_panel = country_map_list_one_value {
		name = "country_infamy_map_list_panel"

		blockoverride "itemvisibility" {
			visible = "[Not(Country.IsColonizable)]"
		}

		blockoverride "shown_on_map_header" {
			text = "concept_infamy"
			onclick = "[MapListPanel.Sort('infamy')]"
		}
		blockoverride "shown_on_map_value" {
			raw_text = "[Country.GetInfamyLabel] ([Country.GetInfamy|-1])"
			tooltip = "[Country.GetInfamyDesc]"
		}
	}

	type country_mass_migration_pull_list_panel = country_map_list_one_value {
		name = "country_mass_migration_pull_list_panel"

		blockoverride "itemvisibility" {
			visible = "[Not(Country.IsColonizable)]"
		}

		blockoverride "shown_on_map_header" {
			text = "concept_mass_migration_pull"
			onclick = "[MapListPanel.Sort('country_migration_pull')]"
		}

		blockoverride "shown_on_map_value" {
			raw_text = "#v [Country.GetLimitedMassMigrationCountryAttraction|1]#!"
			tooltip = "[Country.GetMassMigrationAttractionDesc]"
		}
	}

	type countries_military_map_list_panel = map_list_panel {
		name = "countries_military_map_list_panel"

		blockoverride "header_close_button" {
			onclick = "[MapListPanelManager.CloseCurrentPanel]"
		}

		blockoverride "button_color" {
			color = "[Country.GetDiplomaticStatusColor( GetPlayer.Self )]"
		}

		blockoverride "headers" {
			sort_button = {
				size = { 55 30 }
				onclick = "[MapListPanel.Sort('rank')]"

				button = {
					texture = "gfx/interface/buttons/sort_button_icons/sort_icon_rank.dds"
					size = { 25 25 }
					parentanchor = center
					alwaystransparent = yes
				}

				tooltip = "SORT_BY_RANK"
			}
			sort_button = {
				align = left|nobaseline
				text = "COUNTRY"
				size = { 240 20 }
				onclick = "[MapListPanel.Sort('name')]"
			}
			sort_button = {
				align = hcenter|nobaseline
				size = { 120 20 }
				text = "BATTALIONS"
				onclick = "[MapListPanel.Sort('army')]"
			}
			sort_button = {
				align = hcenter|nobaseline
				size = { 125 20 }
				text = "FLOTILLAS"
				onclick = "[MapListPanel.Sort('navy')]"
			}
		}

		blockoverride "values" {
			datacontext = "[MapListOption.GetCountryData.GetCountry]"
			widget = {
				size = { 50 40 }
				parentanchor = left|vcenter
				alwaystransparent = no
				tooltip = "[Country.GetRankTooltip]"

				rank_badge = {
					size = { 50 50 }
					parentanchor = right|vcenter
					position = { -2 0 }
					
					blockoverride "datacontext " {
						datacontext = "[MapListOption.GetCountryData.GetCountry]" 
					}

					blockoverride "rank_text" {
						raw_text = "#BOLD [Country.GetCountryScorePositionDesc]"
					}
					blockoverride "rank_text_2" {
						raw_text = "#BOLD [Country.GetCountryScorePositionDesc]"
						visible = no
					}
				}
			}
			
			textbox = {
				margin = { 5 0 }
				size = { 240 25 }
				align = left|nobaseline
				text = "[Country.GetName]"
				parentanchor = vcenter
				elide = right
			}

			textbox = {
				margin = { 5 0 }
				size = { 120 25 }
				align = right|nobaseline
				parentanchor = vcenter
				elide = right
				raw_text = "#variable @battalions! [Country.GetBattalions|0]#! "
				tooltip = PANEL_MILITARY_ARMY_CURRENT_BATTALIONS_TOOLTIP
			}
			textbox = {
				margin = { 5 0 }
				size = { 120 25 }
				align = right|nobaseline
				parentanchor = vcenter
				elide = right
				raw_text = "#variable @flotillas! [Country.GetWarships|0]#!"
				tooltip = PANEL_MILITARY_NAVY_CURRENT_FLOTILLAS_TOOLTIP
			}
		}

		blockoverride "interaction" {
			datacontext = "[MapListOption.GetCountryData.GetCountry]"
			onclick = "[InformationPanelBar.OpenCountryPanel(Country.Self)]"
			onrightclick = "[RightClickMenuManager.ShowForCountry(Country.AccessSelf)]"
			onmousehierarchyenter = "[AccessHighlightManager.HighlightCountry(Country.Self)]"
			onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
		}
	}

	### TRADE ROUTES
	type trade_route_map_list_panel = map_list_panel {
		name = "trade_route_map_list_panel"

		blockoverride "headers" {
			sort_button = {
				align = center|nobaseline
				text = "TRADE_ROUTE_LIST_PANEL_MARKET_HEADER"
				tooltip = "TRADE_ROUTE_LIST_PANEL_MARKET_HEADER_TOOLTIP"
				size = { 180 20 }
				onclick = "[MapListPanel.Sort('market')]"
			}
			sort_button = {
				align = center|nobaseline
				text = "TRADE_ROUTE_LIST_PANEL_LEVEL_HEADER"
				tooltip = "TRADE_ROUTE_LIST_PANEL_LEVEL_HEADER_TOOLTIP"
				size = { 60 20 }
				onclick = "[MapListPanel.Sort('level')]"
			}
			sort_button = {
				align = center|nobaseline
				text = "TRADE_ROUTE_LIST_PANEL_QUANTITY_HEADER"
				tooltip = "TRADE_ROUTE_LIST_PANEL_QUANTITY_HEADER_TOOLTIP"
				size = { 85 20 }
				onclick = "[MapListPanel.Sort('quantity')]"
			}
			sort_button = {
				align = center|nobaseline
				text = "TRADE_ROUTE_LIST_PANEL_CONVOYS_HEADER"
				tooltip = "TRADE_ROUTE_LIST_PANEL_CONVOYS_HEADER_TOOLTIP"
				size = { 50 20 }
				onclick = "[MapListPanel.Sort('convoys')]"
			}			
			sort_button = {
				align = center|nobaseline
				text = "TRADE_ROUTE_LIST_PANEL_VALUE_HEADER"
				tooltip = "TRADE_ROUTE_LIST_PANEL_VALUE_HEADER_TOOLTIP"
				size = { 110 20 }
				onclick = "[MapListPanel.Sort('value')]"
			}
			sort_button = {
				align = center|nobaseline
				tooltip = "TRADE_ROUTE_LIST_PANEL_STATUS_HEADER_TOOLTIP"
				size = { 55 20 }
				onclick = "[MapListPanel.Sort('status')]"
				button = {
					texture = "gfx/interface/buttons/sort_button_icons/sort_icon_status.dds"
					size = { 25 25 }
					parentanchor = center
					alwaystransparent = yes
				}
			}
		}

		blockoverride "item" {
			item = {
				map_list_panel_item_interaction = {
					blockoverride "name_button_visibility" {
						visible = yes
					}

					blockoverride "name_button_size" {
						size = { 180 40 }
					}

					blockoverride "name_button_properties" {
						datacontext = "[MapListOption.AccessTradeRouteData.AccessMarket]"
						onclick = "[InformationPanelBar.OpenMarketPanel(Market.AccessSelf)]"
						onrightclick = "[RightClickMenuManager.ShowForMarket(Market.AccessSelf)]"

						tooltipwidget = {
							FancyTooltip_Market = {
								datacontext = "[MapListOption.GetTradeRouteData.GetMarket]"
							}
						}
						
						textbox = {
							margin = { 10 0 }
							size = { 175 25 }
							align = left|nobaseline
							text = "[MapListOption.GetTradeRouteData.GetMarket.GetNameNoFormatting]"
							parentanchor = vcenter
							elide = right
							fontsize_min = 12
						}
					}

					blockoverride "values" {
						textbox = {
							margin = { 5 0 }
							size = { 60 25 }
							align = center|nobaseline
							text = "[MapListOption.GetTradeRouteData.GetLevel|v]"
							tooltip = "[MapListOption.GetTooltip]"
							parentanchor = vcenter
							elide = right
						}
						textbox = {
							margin = { 5 0 }
							size = { 85 25 }
							align = center|nobaseline
							text = "[MapListOption.GetTradeRouteData.GetTradedQuantity|0v]"
							tooltip = "[MapListOption.GetTooltip]"
							parentanchor = vcenter
							elide = right
						}	
						textbox = {
							margin = { 5 0 }
							size = { 50 25 }
							align = center|nobaseline
							text = "[MapListOption.GetTradeRouteData.GetConvoyCost|v]"
							tooltip = "[MapListOption.GetTooltip]"
							parentanchor = vcenter
							elide = right
						}				
						textbox = {
							margin = { 10 0 }
							size = { 110 25 }
							align = center|nobaseline
							raw_text = "@money![MapListOption.GetTradeRouteData.GetProductivity|D+]"
							tooltip = "[MapListOption.GetTooltip]"
							parentanchor = vcenter
							elide = right
						}		
					}
				}
			}
		}
	}

	### STATE
	type state_map_list_panel = map_list_panel {
		name = "state_map_list_panel"

		blockoverride "header_close_button" {
			onclick = "[MapListPanelManager.CloseCurrentPanel]"
		}

		blockoverride "headers" {
			sort_button = {
				align = left|nobaseline
				text = "STATE"
				size = { 240 20 }
				onclick = "[MapListPanel.Sort('name')]"
			}
			sort_button = {
				align = hcenter|nobaseline
				size = { 100 20 }
				text = "POPULATION"
				onclick = "[MapListPanel.Sort('population')]"
			}
			sort_button = {
				align = hcenter|nobaseline
				size = { 100 20 }
				text = "SOL_SHORT_TEXT"
				onclick = "[MapListPanel.Sort('standard_of_living')]"
			}
			sort_button = {
				align = hcenter|nobaseline
				size = { 100 20 }
				text = "GDP_SHORT"
				onclick = "[MapListPanel.Sort('gdp_contribution')]"
			}
		}

		blockoverride "values" {
			textbox = {
				margin = { 5 0 }
				size = { 240 25 }
				align = left|nobaseline
				text = "[MapListOption.GetStateData.GetState.GetOwner.GetFlagTextIcon]  [MapListOption.GetStateData.GetState.GetName]"
				parentanchor = vcenter
				elide = right
			}

			textbox = {
				datacontext = "[MapListOption.GetStateData.GetState]"
				margin = { 5 0 }
				size = { 90 25 }
				align = right|nobaseline
				parentanchor = vcenter
				elide = right
				text = "[State.GetPopulationSize|Kv]"
				tooltip = "TOOLTIP_STATE_POPULATION"
			}

			textbox = {
				datacontext = "[MapListOption.GetStateData.GetState]"
				margin = { 5 0 }
				size = { 100 25 }
				align = right|nobaseline
				parentanchor = vcenter
				elide = right
				tooltip = "NUM_SOL"
				text = "[State.GetAverageStandardOfLivingAll|v1]"
			}

			textbox = {
				datacontext = "[MapListOption.GetStateData.GetState]"
				margin = { 5 0 }
				size = { 100 25 }
				align = right|nobaseline
				parentanchor = vcenter
				elide = right
				raw_text = "@money![State.GetGDPContribution|Dv]"
			}
		}

		blockoverride "interaction" {
			datacontext = "[MapListOption.AccessStateData.AccessState]"
			onclick = "[InformationPanelBar.OpenStatePanel(State.AccessSelf)]"
			onrightclick = "[RightClickMenuManager.ShowForState(State.AccessSelf)]"
			onmousehierarchyenter = "[AccessHighlightManager.HighlightState(State.Self)]"
			onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
		}
	}

	# STATE POPULATION
	type state_population_map_list_panel = state_map_list_one_value {
		name = "state_population_map_list_panel"

		blockoverride "shown_on_map_header" {
			text = "POPULATION"
			onclick = "[MapListPanel.Sort('population')]"
		}
		blockoverride "shown_on_map_value" {
			text = "[State.GetPopulationSize|Kv]"
			tooltip = "TOOLTIP_STATE_POPULATION"
		}
	}

	# STATE LITERACY
	type state_literacy_map_list_panel = state_map_list_one_value {
		name = "state_literacy_map_list_panel"

		blockoverride "shown_on_map_header" {
			text = "concept_literacy"
			onclick = "[MapListPanel.Sort('literacy')]"
		}
		blockoverride "shown_on_map_value" {
			text = "[State.GetLiteracy|%1v]"
			tooltip = "STATE_LITERACY"
		}
	}

	# STATE POLLUTION
	type state_pollution_map_list_panel = state_map_list_one_value {
		name = "state_pollution_map_list_panel"

		blockoverride "shown_on_map_header" {
			text = "concept_pollution_impact"
			onclick = "[MapListPanel.Sort('pollution')]"
		}
		blockoverride "shown_on_map_value" {
			text = "[State.GetStateRegion.GetPollutionImpact|%R1]"
			tooltip = "STATE_POLLUTION"
		}
	}

	# STATE PRODUCTION
	type state_production_map_list_panel = state_map_list_one_value {
		name = "state_production_map_list_panel"

		blockoverride "shown_on_map_header" {
			text = "GDP_CONTRIBUTION"
			onclick = "[MapListPanel.Sort('gdp_contribution')]"
		}
		blockoverride "shown_on_map_value" {
			raw_text = "@money![State.GetGDPContribution|Dv]"
			tooltip = "CURRENT_GDP_STATE"
		}
	}

	# STATE GDP
	type state_gdp_map_list_panel = state_map_list_one_value {
		name = "state_gdp_map_list_panel"

		blockoverride "shown_on_map_header" {
			text = "GDP_CONTRIBUTION"
			onclick = "[MapListPanel.Sort('gdp_contribution')]"
		}
		blockoverride "shown_on_map_value" {
			raw_text = "@money![State.GetGDPContribution|Dv]"
			tooltip = "CURRENT_GDP_STATE"
		}
	}

	# STATE GDP (NATIONALLY)
	type state_gdp_nationally_map_list_panel = state_map_list_one_value {
		name = "state_gdp_nationally_map_list_panel"

		blockoverride "itemvisibility" {
			visible = "[ObjectsEqual(MapListOption.GetStateData.GetState.GetOwner, GetPlayer.Self)]"
		}

		blockoverride "shown_on_map_header" {
			text = "GDP_CONTRIBUTION"
			onclick = "[MapListPanel.Sort('gdp_contribution')]"
		}
		blockoverride "shown_on_map_value" {
			raw_text = "@money![State.GetGDPContribution|Dv]"
			tooltip = "CURRENT_GDP_STATE"
		}
	}

	# STATE STANDARD OF LIVING
	type state_standard_of_living_map_list_panel = state_map_list_one_value {
		name = "state_standard_of_living_map_list_panel"

		blockoverride "shown_on_map_header" {
			text = "concept_sol"
			onclick = "[MapListPanel.Sort('standard_of_living')]"
		}
		blockoverride "shown_on_map_value" {
			raw_text = "[LabelingHelper.GetLabelForStandardOfLivingCFixedPoint(State.GetAverageStandardOfLivingAll)|v] ([State.GetAverageStandardOfLivingAll|v1])"
			tooltip = "NUM_SOL"
		}
	}
	
	# STATE RADICALS
	type state_radicals_map_list_panel = state_map_list_one_value {
		name = "state_radicals_map_list_panel"

		blockoverride "itemvisibility" {
			visible = "[ObjectsEqual(MapListOption.GetStateData.GetState.GetOwner, GetPlayer.Self)]"
		}
		
		blockoverride "header_close_button" {
			onclick = "[MapListPanelManager.CloseCurrentPanel]"
		}
		
		blockoverride "shown_on_map_header" {
			text = "concept_radicals"
			onclick = "[MapListPanel.Sort('radicals')]"
		}
		
		blockoverride "shown_on_map_value" {
			text = "[State.GetNumRadicals|-d]"
		}
	}

	# STATE LOYALISTS
	type state_loyalists_map_list_panel = state_map_list_one_value {
		name = "state_loyalists_map_list_panel"

		blockoverride "itemvisibility" {
			visible = "[ObjectsEqual(MapListOption.GetStateData.GetState.GetOwner, GetPlayer.Self)]"
		}
		
		blockoverride "header_close_button" {
			onclick = "[MapListPanelManager.CloseCurrentPanel]"
		}
		
		blockoverride "shown_on_map_header" {
			text = "concept_loyalists"
			onclick = "[MapListPanel.Sort('loyalists')]"
		}
		
		blockoverride "shown_on_map_value" {
			text = "[State.GetNumLoyalists|+d]"
		}
	}

	# STATE MIGRATION PULL
	type state_migration_pull_list_panel = state_map_list_one_value {
		name = "state_migration_pull_list_panel"

		blockoverride "itemvisibility" {
			visible = "[ObjectsEqual(MapListOption.GetStateData.GetState.GetOwner, GetPlayer.Self)]"
		}

		blockoverride "shown_on_map_header" {
			text = "concept_migration_pull"
			onclick = "[MapListPanel.Sort('migration_pull')]"
		}
		blockoverride "shown_on_map_value" {
			raw_text = "#v [State.GetMigrationLabel]#!"
			tooltip = "MIGRATION_PULL_DESC"
		}
	}

	type state_mass_migration_pull_list_panel = state_map_list_one_value {
		name = "state_mass_migration_pull_list_panel"

		blockoverride "itemvisibility" {
			visible = "[State.IsEligibleForMassMigration]"
		}

		blockoverride "shown_on_map_header" {
			text = "concept_migration_pull"
			onclick = "[MapListPanel.Sort('migration_pull')]"
		}
		blockoverride "shown_on_map_value" {
			raw_text = "#v [State.GetMigrationLabel]#!"
			tooltip = "MIGRATION_PULL_DESC"
		}
	}

	# STATE MIGRATION
	type state_migration_list_panel = state_map_list_one_value {
		name = "state_migration_list_panel"

		blockoverride "shown_on_map_header" {
			text = "concept_weekly_migration"
			onclick = "[MapListPanel.Sort('migration')]"
		}
		blockoverride "shown_on_map_value" {
			raw_text = "#v [State.GetWeeklyPopNetMigration|D=+]#!"
			tooltip = "TOOLTIP_STATE_MIGRATION"
		}
	}

	type state_culture_map_list_panel = map_list_panel {
		name = "state_culture_map_list_panel"

		blockoverride "header_close_button" {
			onclick = "[MapListPanelManager.CloseCurrentPanel]"
		}

		blockoverride "headers" {
			sort_button = {
				align = left|nobaseline
				text = "CULTURE"
				size = { 240 20 }
				onclick = "[MapListPanel.Sort('name')]"
			}
			sort_button = {
				align = hcenter|nobaseline
				size = { 150 20 }
				raw_text = "##1 [concept_culture]"
			}
			sort_button = {
				align = hcenter|nobaseline
				size = { 150 20 }
				raw_text = "##2 [concept_culture]"
			}
		}

		blockoverride "values" {
			textbox = {
				margin = { 5 0 }
				size = { 240 25 }
				align = left|nobaseline
				text = "[MapListOption.GetStateData.GetState.GetOwner.GetFlagTextIcon]  [MapListOption.GetStateData.GetState.GetName]"
				parentanchor = vcenter
				elide = right
			}

			textbox = {
				datacontext = "[MapListOption.GetStateData.GetState]"
				margin = { 5 0 }
				size = { 140 25 }
				align = right|nobaseline
				parentanchor = vcenter
				elide = right
				text = "[State.GetPopCultureDescByIndex('(int32)0')]"
				tooltip = "[State.GetPopCultureDesc]"
			}

			textbox = {
				datacontext = "[MapListOption.GetStateData.GetState]"
				margin = { 5 0 }
				size = { 150 25 }
				align = right|nobaseline
				parentanchor = vcenter
				elide = right
				text = "[State.GetPopCultureDescByIndex('(int32)1')]"
				tooltip = "[State.GetPopCultureDesc]"
			}
		}

		blockoverride "interaction" {
			datacontext = "[MapListOption.AccessStateData.AccessState]"
			onclick = "[InformationPanelBar.OpenStatePanel(State.AccessSelf)]"
			onrightclick = "[RightClickMenuManager.ShowForState(State.AccessSelf)]"
			onmousehierarchyenter = "[AccessHighlightManager.HighlightState(State.Self)]"
			onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
		}
	}

	type activate_conscription_center_map_list_panel = map_list_panel {
		name = "activate_conscription_center_map_list_panel"

		blockoverride "headers" {

			sort_button = {
				align = left|nobaseline
				margin = { 20 0 }
				text = "ACTIVATE_CONSCRIPTION_CENTER_MAP_LIST_PANEL_STATE_HEADER"
				tooltip = "ACTIVATE_CONSCRIPTION_CENTER_MAP_LIST_PANEL_STATE_HEADER_TOOLTIP"
				size = { 160 20 }
				onclick = "[MapListPanel.Sort('state')]"
			}

			sort_button = {
				align = center|nobaseline
				tooltip = "MAP_INTERACTION_ADD_CONSCRIPTS_LIMIT_HEADER_TOOLTIP"
				size = { 90 20 }
				onclick = "[MapListPanel.Sort('size')]"
				button = {
					texture = "gfx/interface/buttons/sort_button_icons/sort_icon_size.dds"
					size = { 25 25 }
					parentanchor = center
					alwaystransparent = yes
				}
			}

			sort_button = {
				align = center|nobaseline
				text = "[concept_hq]"
				size = { 240 20 }
				onclick = "[MapListPanel.Sort('hq')]"
			}


			sort_button = {
				align = center|nobaseline
				tooltip = "BUILDING_MAP_LIST_PANEL_STATUS_HEADER_TOOLTIP"
				size = { 55 20 }
				onclick = "[MapListPanel.Sort('status')]"
				button = {
					texture = "gfx/interface/buttons/sort_button_icons/sort_icon_status.dds"
					size = { 25 25 }
					parentanchor = center
					alwaystransparent = yes
				}
			}
		}

		blockoverride "item" {
			item = {
				map_list_panel_item_interaction = {
					blockoverride "name_button_visibility" {
						visible = yes
					}

					blockoverride "name_button_size" {
						size = { 160 40 }
					}

					blockoverride "name_button_properties" {

						datacontext = "[MapListOption.GetActivateConscriptionCenterData.GetState]"

						onmousehierarchyenter = "[AccessHighlightManager.HighlightState(State.Self)]"
						onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
						onclick = "[InformationPanelBar.OpenStatePanel(State.AccessSelf)]"
						onrightclick = "[RightClickMenuManager.ShowForState(State.AccessSelf)]"

						tooltipwidget = {
							FancyTooltip_State = {}
						}

						textbox = {
							visible = "[Not(And(State.IsUnincorporated, Not(State.IsIncorporating)))]"
							margin = { 10 0 }
							size = { 160 25 }
							align = left|nobaseline
							text = "[State.GetNameNoFormatting]"
							parentanchor = vcenter
							elide = right
							fontsize_min = 12
						}

						textbox = {
							visible = "[And(State.IsUnincorporated, Not(State.IsIncorporating))]"
							margin = { 10 0 }
							size = { 135 25 }
							align = left|nobaseline
							text = "[State.GetNameNoFormatting]"
							parentanchor = vcenter
							elide = right
							fontsize_min = 12
						}
						
						icon = {
							visible = "[And(State.IsUnincorporated, Not(State.IsIncorporating))]"
							parentanchor = right|vcenter
							position = { -10 0 }
							size = { 25 25 }
							texture = "gfx/interface/icons/state_status_icons/unincorporated_state.dds"
						}
					}

					blockoverride "values" {

						textbox = {
							datacontext = "[MapListOption.GetActivateConscriptionCenterData.GetState]"
							margin = { 5 0 }
							size = { 90 25 }
							align = center|nobaseline
							text = "MAP_LIST_STATE_CONSCRIPTION_EXPECTED"
							parentanchor = vcenter
							elide = right
							alpha = "[TransparentIfFalse( GreaterThan_int32(MapListOption.GetActivateConscriptionCenterData.GetNumExpectedConscripts, '(int32)0') )]"
							fontsize_min = 12
							tooltip = "STATE_CONSCRIPTION_TOOLTIP"
						}
	
						textbox = {
							margin = { 5 0 }
							margin_right = 10
							size = { 240 25 }
							align = center|nobaseline
							raw_text = "#v [MapListOption.GetActivateConscriptionCenterData.GetHQ.GetStrategicRegion.GetName]#!"
							parentanchor = vcenter
							elide = right
						}
					}
				}
			}
		}
	}

	# FRONT
	type front_map_list_panel = map_list_panel {
		name = "front_map_list_panel"

		blockoverride "headers" {
			sort_button = {
				align = center|nobaseline
				text = "concept_front"
				size = { 255 20 }
				onclick = "[MapListPanel.Sort('front')]"
			}

			sort_button = {
				align = center|nobaseline
				text = "FRONT_MAP_LIST_PANEL_ADVANTAGE"
				tooltip = "FRONT_MAP_LIST_PANEL_ADVANTAGE_TOOLTIP"
				size = { 115 20 }
				onclick = "[MapListPanel.Sort('advantage')]"
			}

			sort_button = {
				align = center|nobaseline
				text = "FRONT_MAP_LIST_PANEL_UNITS"
				tooltip = "FRONT_MAP_LIST_PANEL_UNITS_TOOLTIP"
				size = { 115 20 }
				onclick = "[MapListPanel.Sort('units')]"
			}

			sort_button = {
				align = center|nobaseline
				tooltip = "DEFAULT_MAP_LIST_PANEL_STATUS_HEADER_TOOLTIP"
				size = { 55 20 }
				onclick = "[MapListPanel.Sort('status')]"
				button = {
					texture = "gfx/interface/buttons/sort_button_icons/sort_icon_status.dds"
					size = { 25 25 }
					parentanchor = center
					alwaystransparent = yes
				}
			}
		}

		blockoverride "item" {
			item = {
				map_list_panel_item_interaction = {
					blockoverride "name_button_visibility" {
						visible = yes
					}

					blockoverride "name_button_size" {
						size = { 255 40 }
					}

					blockoverride "name_button_properties" {
						datacontext = "[MapListOption.GetAdvanceFrontData.GetFront]"

						onmousehierarchyenter = "[AccessHighlightManager.HighlightFront(MapListOption.GetAdvanceFrontData.GetFront)]"
						onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"

						onclick = "[InformationPanelBar.OpenFrontPanel(Front.AccessSelf)]"

						textbox = {
							margin = { 10 0 }
							size = { 250 25 }
							align = left|nobaseline
							text = "[Front.GetName]"
							parentanchor = vcenter
							elide = right
							fontsize_min = 14
						}
					}

					blockoverride "values" {
						datacontext = "[MapListOption.GetAdvanceFrontData.GetFront]"

						textbox = {
							visible = "[Not(StringIsEmpty( Front.GetPlayerAdvantageDesc ))]"
							tooltip = "[Front.GetPlayerAdvantageDesc]"
							raw_text = "#v [Front.GetPlayerAdvantageRaw|+]#!"
							size = { 115 25 }
							align = hcenter|nobaseline
							elide = right
							parentanchor = center
						}

						textbox = {
							margin = { 5 0 }
							size = { 115 25 }
							align = hcenter|nobaseline
							raw_text = "@battalions! [Front.GetNumUnits( GetPlayer.Self )|v]"
							parentanchor = vcenter
							elide = right
							using = tooltip_above
						}
					}

					blockoverride "interaction" {
						datacontext = "[MapListOption.GetAdvanceFrontData.GetFront]"
						enabled = "[MapListOption.CanClick]"
						onclick = "[MapListOption.OnClick]"
						onmousehierarchyenter = "[AccessHighlightManager.HighlightFront(MapListOption.GetAdvanceFrontData.GetFront)]"
						onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
					}
				}
			}
		}
	}
}
