template hud_elements_alpha {
	alpha = 1
}

# Note: We are using a slightly modified version of this in outliner_framework:11, update that one as well if this one gets changed
template hud_visibility {
	visible = "[And( IsInGame, And( Not( IsPauseMenuShown ), Not( IsGameOverScreenShown )))]"
}

@secondary_icon_size = 26

types topbar_components
{
	### SECONDARY ICONS
	type topbar_secondary_icons = container {
		position = { 190 0 }
		
		flowcontainer = {
			visible = "[GetMetaPlayer.GetPlayedOrObservedCountry.IsValid]"
			block "animation" {
				position = { 0 0 }
				alpha = 0
				
				state = {
					name = show_topbar_secondary_stats
					alpha = 1
					position_y = 44
					duration = 0.15
					using = Animation_Curve_Default
				}
				state = {
					name = hide_topbar_secondary_stats
					alpha = 0
					position_y = 0
					duration = 0.15
					using = Animation_Curve_Default
				}
			}
			
			background = {
				using = dark_area_rounded
				margin = { 0 -5 }
				margin_left = 5
				margin_right = 35
			}
			
			flowcontainer = {
				minimumsize = { 90 30 }
				maximumsize = { 90 30 }
				spacing = 2	
				tooltip = PRESTIGE
				using = tooltip_below
				alpha = "[TransparentIfZero_int32(Country.GetPrestige)]"
				alwaystransparent = no
		
				icon = {
					texture = "gfx/interface/icons/generic_icons/unused/most_senior_front_commander.dds"
					size = { @secondary_icon_size @secondary_icon_size }
					parentanchor = vcenter
				}
				textbox = {
					parentanchor = vcenter
					raw_text = "#variable [Country.GetPrestige|D]#!"
					autoresize = yes
					align = left|nobaseline
				}
			}
			
			background = {
				using = dark_area_rounded
				margin = { 0 -5 }
				margin_left = 5
				margin_right = 20
			}

			flowcontainer = {
				name = "tutorial_highlight_gdp"
				minimumsize = { 88 30 }
				maximumsize = { 88 30 }
				spacing = 2
				using = GDP_tooltip_with_graph
				using = tooltip_below

				onmousehierarchyenter = "[SetTempMapModeByKey('mm_gdp')]"
				onmousehierarchyleave = "[RemoveTempMapMode]"
				alwaystransparent = no
				
				icon = {
					texture = "gfx/interface/icons/generic_icons/gdp.dds"
					size = { @secondary_icon_size @secondary_icon_size }
					parentanchor = vcenter
				}
				textbox = {
					parentanchor = vcenter
					raw_text = "#variable [Country.GetGDP|1*]#!"
					autoresize = yes
					align = left|nobaseline
					elide = right
					fontsize_min = 12
				}
			}
			
			flowcontainer = {
				minimumsize = { 84 30 }
				maximumsize = { 84 30 }
				spacing = 2
				using = literacy_tooltip_with_graph
				using = tooltip_below
				onmousehierarchyenter = "[SetTempMapModeByKey('mm_literacy')]"
				onmousehierarchyleave = "[RemoveTempMapMode]"
				alwaystransparent = no

				icon = {
					texture = "gfx/interface/icons/generic_icons/literacy.dds"
					size = { @secondary_icon_size @secondary_icon_size }
					parentanchor = vcenter
				}
				textbox = {
					parentanchor = vcenter
					raw_text = "#variable [Country.GetIncorporatedLiteracyRate|%1]#!"
					autoresize = yes
					align = left|nobaseline
					elide = right
					fontsize_min = 12
				}
			}
			flowcontainer = {
				minimumsize = { 68 30 }
				maximumsize = { 68 30 }
				spacing = 2
				using = average_standard_of_living_tooltip_with_graph
				using = tooltip_below
				onmousehierarchyenter = "[SetTempMapModeByKey('mm_standard_of_living')]"
				onmousehierarchyleave = "[RemoveTempMapMode]"
				alwaystransparent = no

				textbox = {
					parentanchor = vcenter
					text = "[LabelingHelper.GetIconForStandardOfLivingCFixedPoint(Country.GetAverageSoLByPopulation)|v]"
					autoresize = yes
					align = left|nobaseline
					fontsize = 21 #hack to get the same size on the text icon as the rest in the top bar
				}

				textbox = {
					parentanchor = vcenter
					text = "[Country.GetFormattedStandardOfLivingAll|v]"
					autoresize = yes
					align = left|nobaseline
					elide = right
					fontsize_min = 12
					margin_right = 3
				}
			}
			flowcontainer = {
				minimumsize = { 78 30 }
				maximumsize = { 78 30 }
				spacing = 2
				using = population_tooltip_with_graph
				using = tooltip_below
				onmousehierarchyenter = "[SetTempMapModeByKey('mm_population')]"
				onmousehierarchyleave = "[RemoveTempMapMode]"
				alwaystransparent = no

				icon = {
					texture = "gfx/interface/icons/generic_icons/population.dds"
					size = { @secondary_icon_size @secondary_icon_size }
					parentanchor = vcenter
				}
				textbox = {
					parentanchor = vcenter
					raw_text = "#variable [Country.GetTotalPopulation|D]#!"
					autoresize = yes
					align = left|nobaseline
					elide = right
					fontsize_min = 12
					margin_right = 3
				}
			}
			flowcontainer = {
				minimumsize = { 76 30 }
				maximumsize = { 76 30 }
				spacing = 2
				using = radicals_tooltip_with_graph
				using = tooltip_below
				onmousehierarchyenter = "[SetTempMapModeByKey('mm_radicals')]"
				onmousehierarchyleave = "[RemoveTempMapMode]"
				alpha = "[TransparentIfZero_int64(Country.GetNumRadicals)]"
				alwaystransparent = no

				icon = {
					texture = "gfx/interface/icons/generic_icons/population_radical.dds"
					size = { @secondary_icon_size @secondary_icon_size }
					parentanchor = vcenter
				}
				textbox = {
					parentanchor = vcenter
					raw_text = "#variable [Country.GetNumRadicals|D]#!"
					autoresize = yes
					align = left|nobaseline
					elide = right
					fontsize_min = 12
				}
			}
			flowcontainer = {
				minimumsize = { 76 30 }
				maximumsize = { 76 30 }
				spacing = 2
				using = loyalists_tooltip_with_graph
				using = tooltip_below
				onmousehierarchyenter = "[SetTempMapModeByKey('mm_loyalists')]"
				onmousehierarchyleave = "[RemoveTempMapMode]"
				alpha = "[TransparentIfZero_int64(Country.GetNumLoyalists)]"
				alwaystransparent = no

				icon = {
					texture = "gfx/interface/icons/generic_icons/population_loyalist.dds"
					size = { @secondary_icon_size @secondary_icon_size }
					parentanchor = vcenter
				}
				textbox = {
					parentanchor = vcenter
					raw_text = "#variable [Country.GetNumLoyalists|D]#!"
					autoresize = yes
					align = left|nobaseline
					elide = right
					fontsize_min = 12
				}
			}
			flowcontainer = {
				minimumsize = { 66 30 }
				maximumsize = { 66 30 }
				spacing = 2
				tooltip = "[Country.GetInfamyDesc]"
				using = tooltip_below
				onmousehierarchyenter = "[SetTempMapModeByKey('mm_infamy')]"
				onmousehierarchyleave = "[RemoveTempMapMode]"
				alpha = "[TransparentIfZero(Country.GetInfamy)]"
				alwaystransparent = no

				icon = {
					size = { @secondary_icon_size @secondary_icon_size }
					texture = "[Country.GetInfamyIconTexture]"
					parentanchor = vcenter
				}
				textbox = {
					parentanchor = vcenter
					raw_text = "#variable [Country.GetInfamy|0]#!"
					autoresize = yes
					align = left|nobaseline
					elide = right
					fontsize_min = 12
				}
			}
			flowcontainer = {
				minimumsize = { 90 30 }
				maximumsize = { 90 30 }
				spacing = 2	
				tooltip = PANEL_MILITARY_NAVY_CURRENT_FLOTILLAS_TOOLTIP
				using = tooltip_below
				onmousehierarchyenter = "[SelectMapModeByKey('mm_military')]"
				onmousehierarchyleave = "[UnforceMapMode]"
				alpha = "[TransparentIfZero_int64(Country.GetNumFlotillas)]"
				alwaystransparent = no
		
				icon = {
					texture = "gfx/interface/icons/generic_icons/flotillas.dds"
					size = { @secondary_icon_size @secondary_icon_size }
					parentanchor = vcenter
				}
				textbox = {
					parentanchor = vcenter
					raw_text = "#variable [Country.GetWarships|0]#!"
					autoresize = yes
					align = left|nobaseline
				}
			}
			flowcontainer = {
				minimumsize = { 90 30 }
				maximumsize = { 90 30 }
				spacing = 2
				tooltip = PANEL_MILITARY_ARMY_OVERVIEW_TOOLTIP
				using = tooltip_below
				onmousehierarchyenter = "[SelectMapModeByKey('mm_military')]"
				onmousehierarchyleave = "[UnforceMapMode]"
				alpha = "[TransparentIfZero_int64(Country.GetNumBattalions)]"
				alwaystransparent = no
		
				icon = {
					texture = "gfx/interface/icons/generic_icons/battalions.dds"
					size = { @secondary_icon_size @secondary_icon_size }
					parentanchor = vcenter
				}
				textbox = {
					parentanchor = vcenter
					raw_text = "#variable [Country.GetRegularBattalions|v] + [Country.CalcConscriptableBattalions|v]#!"
					autoresize = yes
					align = left|nobaseline
				}
			}
		}
	}

	type topbar = widget {
		widget = {
			name = "topbar"
			using = hud_visibility
			datacontext = "[AccessMetaPlayer.AccessPlayedOrObservedCountry]"
			using = clickthrough_blocker
			size = { 1065 80 }
			allow_outside = yes
			resizeparent = yes
			
			#alpha = 0
			#position = { 0 -100 }

			#state = {
			#	name = _show
			#	using = default_show_properties
			#	#position_y = 0
			#	
			#	on_start = "[PdxGuiTriggerAllAnimations('hud_shiny_effect_show')]"
			#}
			#state = {
			#	name = _hide
			#	using = default_hide_properties
			#	#position_y = -100
			#}
			
			using = default_fade_in_out
			
			onmousehierarchyenter = "[PdxGuiInterruptThenTriggerAllAnimations('hide_topbar_secondary_stats','show_topbar_secondary_stats')]"
			onmousehierarchyleave = "[PdxGuiInterruptThenTriggerAllAnimations('show_topbar_secondary_stats','hide_topbar_secondary_stats')]"

			widget = {
				### background
				#this is also used to trigger notifications maximize/minimize
				#when you open/close any fullscreen (did not know where else to put it)
				widget = {
					using = fullscreen_hide
					size = { 100% 100% }
					
					state = {
						name = _show
						alpha = 1
						duration = 0
						on_start = "[PdxGuiInterruptThenTriggerAllAnimations('notifications_minimize','notifications_maximize')]"
					}
					state = {
						name = _hide
						alpha = 0
						duration = 0.2
						on_start = "[PdxGuiInterruptThenTriggerAllAnimations('notifications_maximize','notifications_minimize')]"
					}
					
					background = {
						texture = "gfx/interface/main_hud/topbar_bg.dds"
						shaderfile = "gfx/FX/pdxgui_default.shader"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						spriteborder_bottom = 94
						spriteborder_right = 100
						texture_density = 2
						using = hud_elements_alpha
						
						modify_texture = {
							texture = "gfx/interface/backgrounds/default_bg_shading.dds"
							spriteType = Corneredstretched
							spriteborder = { 0 0 }
							blend_mode = overlay
							alpha = 0.5
						}
						modify_texture = {
							using = texture_velvet
						}
						modify_texture = {
							using = fancy_pattern
						}
					}
					icon = {
						texture = "gfx/interface/main_hud/topbar_side_dec.dds"
						size = { 100% 100% }
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						spriteborder_bottom = 94
						spriteborder_right = 110
						texture_density = 2
						
						using = hud_shiny_effect
					}
				}
				
				flowcontainer = {
					margin_right = 75
					margin_bottom = 7
					resizeparent = yes
					
					container = {
						### PRIMARY ICONS
						flowcontainer = {
							position = { 220 -1 }

							block "spacing" {
								spacing = 12
							}
							margin_bottom = 5
							
							flowcontainer = {
								# TODO Mikael / Aron: surely there is a better way to do this
								name = "tutorial_highlight_all_capacities"
								block "spacing" {
									spacing = 12
								}
								
								### BUREAUCRACY
								button = {
									name = "tutorial_highlight_bureaucracy"
									using = glow_button
									size = { 100 40 }
									tooltip = "BUREAUCRACY_TOOLTIP"
									using = tooltip_below
									onclick = "[InformationPanelBar.OpenPanelTab('politics', 'institutions')]"
									enabled = "[GetMetaPlayer.GetPlayedOrObservedCountry.IsValid]"
							
									icon = {
										size = { 32 32 }
										position = { 0 2 }
										name = bureaucracy_icon
										texture = "gfx/interface/icons/topbar/bureaucracy_icon.dds"
										parentanchor = vcenter
									}
									
									textbox = {
										position = { 35 -3 }
										name = capital_value
										raw_text = "#bold [GetPlayer.GetPowerDelta('bureaucracy')|D=+]#!"
										align = center|nobaseline
										using = fontsize_large
										autoresize = yes
										parentanchor = vcenter
									}
									
									double_direction_progressbar = {
										size = { 60 6 }
										position = { 40 -3 }
										parentanchor = bottom
										
										blockoverride "value_left" {
											value = "[Negate_float(FixedPointToFloat(GetPlayer.GetDeficitPowerRatioForProgressBar('bureaucracy')))]"
										}
										blockoverride "value_right" {
											value = "[FixedPointToFloat(GetPlayer.GetExcessPowerRatioForProgressBar('bureaucracy'))]"
										}
									}			
								}
							
								### AUTHORITY
								button = {
									name = "tutorial_highlight_authority"
									using = glow_button
									size = { 100 40 }
									tooltip = "AUTHORITY_TOOLTIP"
									using = tooltip_below
									onclick = "[InformationPanelBar.OpenPanelTab('politics', 'default')]"
									enabled = "[GetMetaPlayer.GetPlayedOrObservedCountry.IsValid]"
							
									icon = {
										size = { 32 32 }
										position = { 0 2 }
										name = authority_icon
										texture = "gfx/interface/icons/topbar/authority_icon.dds"
										parentanchor = vcenter
									}
								
									textbox = {
										position = { 35 -3 }
										name = capital_value
										raw_text = "#bold [GetPlayer.GetPowerDelta('authority')|=+D]#!"
										align = left|nobaseline
										using = fontsize_large
										autoresize = yes
										parentanchor = vcenter
									}
									
									double_direction_progressbar = {
										size = { 60 6 }
										position = { 40 -3 }
										parentanchor = bottom
										
										blockoverride "value_left" {
											value = "[Negate_float(FixedPointToFloat(GetPlayer.GetDeficitPowerRatioForProgressBar('authority')))]"
										}
										blockoverride "value_right" {
											value = "[FixedPointToFloat(GetPlayer.GetExcessPowerRatioForProgressBar('authority'))]"
										}
									}				
								}
							
								### LEGITIMACY
								button = {
									name = "tutorial_highlight_legitimacy"
									using = glow_button
									size = { 100 40 }
									tooltip = "[SelectLocalization( LegitimacyLevel.IsActive( Country.GetGovernmentLegitimacy ), 'LEGITIMACY_LEVEL_ACTIVE_TOOLTIP', 'LEGITIMACY_LEVEL_INACTIVE_TOOLTIP' )]"
									using = tooltip_below
									onclick = "[InformationPanelBar.OpenPanelTab('politics', 'interest_groups')]"
									enabled = "[GetMetaPlayer.GetPlayedOrObservedCountry.IsValid]"
							
									icon = {
										size = { 32 32 }
										position = { 0 2 }
										name = authority_icon
										texture = "gfx/interface/icons/generic_icons/legitimacy.dds"
										parentanchor = vcenter
									}
								
									textbox = {
										position = { 35 -3 }
										name = capital_value
										raw_text = "#bold  [Country.GetGovernmentLegitimacy|D]#!"
										align = left|nobaseline
										using = fontsize_large
										autoresize = yes
										parentanchor = vcenter
									}
									
									widget = {
										size = { 60 12 }
										position = { 40 0 }
										parentanchor = bottom
									
										default_progressbar_horizontal = {
											parentanchor = vcenter
											name = "default_progressbar"
											size = { 60 6 }
											blockoverride "values" {
												value = "[Country.GetGovernmentLegitimacy]"
												min = 0  
												max = 100
											}
										}
									}			
								}
							
								### INFAMY
								button = {
									name = "tutorial_highlight_infamy"
									using = glow_button
									size = { 100 40 }
									tooltip = "[Country.GetInfamyDesc]"
									using = tooltip_below
									onclick = "[InformationPanelBar.OpenPanelTab('politics', 'default')]"
									enabled = "[GetMetaPlayer.GetPlayedOrObservedCountry.IsValid]"
									onmousehierarchyenter = "[SelectMapModeByKey('mm_infamy')]"
									onmousehierarchyleave = "[UnforceMapMode]"
							
									icon = {
										size = { 32 32 }
										position = { 0 2 }
										name = infamy_icon
										texture = "[Country.GetInfamyIconTexture]"
										parentanchor = vcenter
									}
								
									textbox = {
										position = { 35 -3 }
										name = capital_value
										raw_text = "#bold  [GetPlayer.GetInfamy|1]#!"
										align = left|nobaseline
										using = fontsize_large
										autoresize = yes
										parentanchor = vcenter
									}
									
									widget = {
										size = { 60 12 }
										position = { 40 0 }
										parentanchor = bottom
									
										bad_progressbar_horizontal = {
											parentanchor = vcenter
											name = "bad_progressbar"
											size = { 60 6 }
											blockoverride "values" {
												value = "[FixedPointToFloat(GetPlayer.GetInfamy)]"
												min = 0  
												max = 100
											}
										}
									}			
								}
							
								### INFLUENCE
								button = {
									name = "tutorial_highlight_influence"
									using = glow_button
									size = { 100 40 }
									tooltip = "INFLUENCE_TOOLTIP"
									using = tooltip_below
									onclick = "[InformationPanelBar.OpenPanelTab('diplomatic_overview', 'default')]"
									enabled = "[GetMetaPlayer.GetPlayedOrObservedCountry.IsValid]"
									
									icon = {
										size = { 32 32 }
										position = { 0 2 }
										name = dip_power_icon
										texture = "gfx/interface/icons/topbar/influence_icon.dds"
										parentanchor = vcenter
									}
									
									textbox = {
										position = { 35 -3 }
										name = capital_value
										raw_text = "#bold [GetPlayer.GetPowerDelta('influence')|=+D]#!"
										align = left|nobaseline
										using = fontsize_large
										autoresize = yes
										parentanchor = vcenter
									}
									
									double_direction_progressbar = {
										size = { 60 6 }
										position = { 40 -3 }
										parentanchor = bottom
										
										blockoverride "value_left" {
											value = "[Negate_float(FixedPointToFloat(GetPlayer.GetDeficitPowerRatioForProgressBar('influence')))]"
										}
										blockoverride "value_right" {
											value = "[FixedPointToFloat(GetPlayer.GetExcessPowerRatioForProgressBar('influence'))]"
										}
									}
								}
							}

							block "convoys_info" {
								button = {
									name = "tutorial_highlight_convoys"
									using = glow_button
									size = { 100 40 }
									tooltip = "CONVOY_TOPBAR_TOOLTIP"
									using = tooltip_below
									onclick = "[InformationPanelBar.OpenMarketPanelTab(AccessPlayer.AccessFirstMarket, 'trade_routes')]"
									enabled = "[GetMetaPlayer.GetPlayedOrObservedCountry.IsValid]"
									alpha = "[TransparentIfZero(GetPlayer.GetSupplyNetworkStrength)]"
									
									widget = {
										size = { 32 32 }
										name = convoys_icon
										parentanchor = vcenter
										position = { 0 2 }
									
										icon = {
											parentanchor = center
											size = { 28 28 }
											texture = "gfx/interface/icons/generic_icons/convoys.dds"
										}
										
									}
									textbox = {
										position = { 35 -3 }
										name = capital_value
										raw_text = "#bold [GetPlayer.GetNumAvailableConvoys|=+D]#!"
										align = left|nobaseline
										using = fontsize_large
										autoresize = yes
										parentanchor = vcenter
									}
									
									double_direction_progressbar = {
										size = { 60 6 }
										position = { 40 -3 }
										parentanchor = bottom
										
										blockoverride "value_left" {
											value = "[Negate_float(FixedPointToFloat(GetPlayer.GetDeficitConvoyRatioForProgressBar))]"
										}
										blockoverride "value_right" {
											value = "[FixedPointToFloat(GetPlayer.GetExcessConvoyRatioForProgressBar)]"
										}
									}
								}	
							}
							
							### MONEY
							container = {
								name = "tutorial_highlight_treasury"
								layoutpolicy_vertical = expanding
								
								button = {
									using = glow_button					
									size = { 100 40 }
									tooltip = "CAPITAL_MONEY"
									using = tooltip_below
									using = money_tooltip_with_graph
									onclick = "[InformationPanelBar.OpenPanelTab('budget', 'default')]"
									enabled = "[GetMetaPlayer.GetPlayedOrObservedCountry.IsValid]"
								
									icon = {
										size = { 32 32 }
										position = { 0 2 }
										name = income_power_icon
										texture = "gfx/interface/icons/topbar/income_power_icon.dds"
										parentanchor = vcenter
									}
								
									textbox = {
										position = { 35 -3 }
										name = capital_value
										text = "[AccessPlayer.PredictWeeklyBalanceWithEconomyHealthHint]"
										align = left|nobaseline
										using = fontsize_large
										autoresize = yes
										parentanchor = vcenter
									}
									widget = {
										size = { 60 12 }
										position = { 40 0 }
										parentanchor = bottom
										visible = "[GreaterThanOrEqualTo_CFixedPoint( GetPlayer.GetCreditRatio, '(CFixedPoint)0' )]"

										bad_progressbar_horizontal = {
											parentanchor = vcenter
											name = "credit_progressbar"
											size = { 60 6 }
											blockoverride "values" {
												value = "[FixedPointToFloat(GetPlayer.GetCreditRatio)]"
												min = 0  
												max = 1
											}
										}
									}
									
									widget = {
										size = { 60 12 }
										position = { 40 0 }
										parentanchor = bottom
										visible = "[GreaterThan_CFixedPoint( GetPlayer.GetGoldReserveRatio, '(CFixedPoint)0' )]"
									
										gold_progressbar_horizontal = {
											parentanchor = vcenter
											name = "gold_progressbar"
											size = { 60 6 }
											blockoverride "values" {
												value = "[FixedPointToFloat(GetPlayer.GetGoldReserveRatio )]"
												min = 0  
												max = 1
											}
										}
									}
								}
							}
						
						}
						
						#shows only on hover
						topbar_secondary_icons = {
							visible = "[GetVariableSystem.Exists('more_topbar_info')]"
						}
						
						#locked
						topbar_secondary_icons = {
							visible = "[Not(GetVariableSystem.Exists('more_topbar_info'))]"
							
							blockoverride "animation" {
								position = { 0 44 }
							}
						}
					}
				}
			}
			
			### LOCK TOGGLE FOR SECONDARY ROW OF ICONS
			button_icon_round_toggle = {
				visible = "[GetMetaPlayer.GetPlayedOrObservedCountry.IsValid]"
				size = { 24 24 }
				parentanchor = bottom|right
				position = { -25 -9 }
				
				alpha = 0
				
				state = {
					name = show_topbar_secondary_stats
					delay = 0.15
					alpha = 1
					duration = 0.15
					using = Animation_Curve_Default
				}
				state = {
					name = hide_topbar_secondary_stats
					alpha = 0
					duration = 0
					using = Animation_Curve_Default
				}
				
				blockoverride "on_click" {
					onclick = "[GetVariableSystem.Toggle('more_topbar_info')]"
				}
				blockoverride "view_1" {
					visible = "[GetVariableSystem.Exists('more_topbar_info')]"
				}
				blockoverride "view_2" {
					visible = "[Not(GetVariableSystem.Exists('more_topbar_info'))]"
				}
				blockoverride "icon_1" {
					texture = "gfx/interface/buttons/button_icons/unlock.dds"
				}
				blockoverride "icon_2" {
					texture = "gfx/interface/buttons/button_icons/lock.dds"
				}
				blockoverride "tooltip_1" {
					tooltip = "LOCK_TOPBAR"
				}
				blockoverride "tooltip_2" {
					tooltip = "UNLOCK_TOPBAR"
				}
			}
			
			### FLAG
			fancy_flag = {
				blockoverride "rank_badge_block" {} # Show rank badge seperately from flag with topbar_rank

				observer_mode_overlay = {
					blockoverride "observer_properties" {
						position = { -1 -105 }
					}

					blockoverride "icon_size" {
						size = { 25 25 }
					}

					blockoverride "fontsize" {
						using = fontsize_medium
						maximumsize = { 100 -1 }
					}
				}
			}

			character_portrait_small2 = {
				position = { 123 -4 }
				datacontext = [AccessPlayer.AccessRuler]
				blockoverride "show_hat" {}
				blockoverride "highlight" {}
				blockoverride "rank_icon" {}
				parentanchor = vcenter
			}
		}
	}

	type topbar_rank = button {
		name = "topbar_rank"
		using = hud_visibility
		datacontext = "[GetPlayer]"
		using = clickthrough_blocker
		size = { 57 57 }
		position = { -4 78 }
		
		onclick = "[MapListPanelManager.ToggleCurrentPanel]"
		onclick = "[SetTempMapModeByKey('mm_default')]"

		### RANK
		rank_badge = {
			size = { 57 57 }
		}
	}
}
